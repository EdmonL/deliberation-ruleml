<?xml version="1.0" encoding="UTF-8"?><xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:spec="http://ruleml.org/spec" elementFormDefault="qualified" targetNamespace="http://ruleml.org/spec">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <xs:element name="RuleML">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:act"/>
      </xs:sequence>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Assert">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula"/>
      </xs:sequence>
      <xs:attribute name="mapMaterial">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="mapDirection">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="bidirectional"/>
            <xs:enumeration value="forward"/>
            <xs:enumeration value="backward"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Retract">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula"/>
      </xs:sequence>
      <xs:attribute name="mapMaterial">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="mapDirection">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="bidirectional"/>
            <xs:enumeration value="forward"/>
            <xs:enumeration value="backward"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Query">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula_2"/>
      </xs:sequence>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Atom">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:element ref="spec:op"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:arg"/>
      </xs:sequence>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Rel">
    <xs:complexType mixed="true">
      <xs:attribute name="iri" type="xs:anyURI"/>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="And">
    <xs:sequence>
      <xs:element name="And">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula_3"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="Or">
    <xs:sequence>
      <xs:element name="Or">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula_4"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="Implies">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:element ref="spec:if"/>
        <xs:element ref="spec:then"/>
      </xs:sequence>
      <xs:attribute name="direction">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="bidirectional"/>
            <xs:enumeration value="forward"/>
            <xs:enumeration value="backward"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="material">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Forall">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:element maxOccurs="unbounded" ref="spec:declare"/>
        <xs:group ref="spec:formula_5"/>
      </xs:sequence>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="Exists">
    <xs:sequence>
      <xs:element name="Exists">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:element maxOccurs="unbounded" ref="spec:declare"/>
            <xs:group ref="spec:formula_6"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="Equal">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
        <xs:element ref="spec:left"/>
        <xs:element ref="spec:right"/>
      </xs:sequence>
      <xs:attribute name="oriented">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="no"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Data" type="xs:anyType"/>
  <xs:element name="Skolem">
    <xs:complexType mixed="true">
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Reify"><xs:complexType><xs:sequence><xs:any minOccurs="0" processContents="strict" namespace="##targetNamespace"/></xs:sequence><xs:attribute name="node" type="xs:anyURI"/><xs:attribute ref="xml:base"/><xs:attribute ref="xml:id"/></xs:complexType></xs:element>
  <xs:element name="Ind">
    <xs:complexType mixed="true">
      <xs:attribute name="iri" type="xs:anyURI"/>
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Var">
    <xs:complexType mixed="true">
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="node" type="xs:anyURI"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="formula">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:element ref="spec:Equal"/>
            <xs:element ref="spec:Implies"/>
            <xs:element ref="spec:Forall"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="formula_2">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:element ref="spec:Equal"/>
            <xs:group ref="spec:And"/>
            <xs:group ref="spec:Or"/>
            <xs:group ref="spec:Exists"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="op">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="spec:Rel"/>
      </xs:sequence>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="formula_3">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:element ref="spec:Equal"/>
            <xs:group ref="spec:And_2"/>
            <xs:group ref="spec:Or_2"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="formula_4">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:element ref="spec:Equal"/>
            <xs:group ref="spec:And_2"/>
            <xs:group ref="spec:Or_2"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="then">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="spec:Atom"/>
        <xs:element ref="spec:Equal"/>
        <xs:group ref="spec:And_3"/>
        <xs:group ref="spec:Or_3"/>
        <xs:group ref="spec:Exists_2"/>
      </xs:choice>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="if">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="spec:Atom"/>
        <xs:element ref="spec:Equal"/>
        <xs:group ref="spec:And_2"/>
        <xs:group ref="spec:Or_2"/>
      </xs:choice>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="declare">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="spec:Var"/>
      </xs:sequence>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="formula_5">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:element ref="spec:Equal"/>
            <xs:element ref="spec:Implies"/>
            <xs:element ref="spec:Forall"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="formula_6">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:element ref="spec:Equal"/>
            <xs:group ref="spec:And_2"/>
            <xs:group ref="spec:Or_2"/>
            <xs:group ref="spec:Exists"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="meta">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="spec:Atom"/>
        <xs:element ref="spec:Equal"/>
        <xs:element ref="spec:Implies"/>
        <xs:element ref="spec:Forall"/>
      </xs:choice>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="left">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="spec:Skolem"/>
        <xs:element ref="spec:Reify"/>
        <xs:element ref="spec:Ind"/>
        <xs:element ref="spec:Data"/>
        <xs:element ref="spec:Var"/>
      </xs:choice>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="right">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="spec:Skolem"/>
        <xs:element ref="spec:Reify"/>
        <xs:element ref="spec:Ind"/>
        <xs:element ref="spec:Data"/>
        <xs:element ref="spec:Var"/>
      </xs:choice>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="arg">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="spec:Skolem"/>
        <xs:element ref="spec:Reify"/>
        <xs:element ref="spec:Ind"/>
        <xs:element ref="spec:Data"/>
        <xs:element ref="spec:Var"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:positiveInteger"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="act">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="spec:Assert"/>
        <xs:element ref="spec:Retract"/>
        <xs:element ref="spec:Query"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:positiveInteger"/>
      <xs:attribute ref="xml:base"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexType>
  </xs:element>
  
  
  <xs:group name="And_2">
    <xs:sequence>
      <xs:element name="And">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula_3"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="Or_2">
    <xs:sequence>
      <xs:element name="Or">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula_4"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="And_3">
    <xs:sequence>
      <xs:element name="And">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula_7"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="Or_3">
    <xs:sequence>
      <xs:element name="Or">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="spec:formula_8"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="Exists_2">
    <xs:sequence>
      <xs:element name="Exists">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="spec:meta"/>
            <xs:element maxOccurs="unbounded" ref="spec:declare"/>
            <xs:group ref="spec:formula_9"/>
          </xs:sequence>
          <xs:attribute name="node" type="xs:anyURI"/>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="formula_7">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:group ref="spec:And_3"/>
            <xs:group ref="spec:Or_3"/>
            <xs:group ref="spec:Exists_2"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="formula_8">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:group ref="spec:And_3"/>
            <xs:group ref="spec:Or_3"/>
            <xs:group ref="spec:Exists_2"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="formula_9">
    <xs:sequence>
      <xs:element name="formula">
        <xs:complexType>
          <xs:choice>
            <xs:element ref="spec:Atom"/>
            <xs:group ref="spec:And_3"/>
            <xs:group ref="spec:Or_3"/>
            <xs:group ref="spec:Exists_2"/>
          </xs:choice>
          <xs:attribute ref="xml:base"/>
          <xs:attribute ref="xml:id"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
</xs:schema>