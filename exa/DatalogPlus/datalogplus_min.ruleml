<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://deliberation.ruleml.org/1.01/relaxng/datalogplus_min_relaxed.rnc"?>
<RuleML xmlns="http://ruleml.org/spec">
  <!-- Some of these examples are from
  "A general Datalog-based framework for tractable query answering 
  over ontologies",
  Andrea CalÃ¬,
  Georg Gottlob
  Thomas Lukasiewicz  
  http://dx.doi.org/10.1016/j.websem.2012.03.001
	(preprint at http://www.websemanticsjournal.org/index.php/ps/article/view/289)
  -->

  <!-- This "Rulebase" contains 20 rules: 10 Assert rules and 10 Query rule.
       Each Query demonstrates the semantics of the previous Assert rule
       by providing (in the XML comments) the expected answer to the Query.
  -->
  <Assert>
    <!-- Equations are allowed as facts:
         William is an employee.
         "Bill" is an alias for "William".
         -->
    <Atom>
      <Rel>employee</Rel>
      <Ind>William</Ind>
    </Atom>
    <Equal>
      <Ind>Bill</Ind>
      <Ind>William</Ind>
    </Equal>
  </Assert>
  <Query>
    <!-- 
      Who are the employees?
      Answers: 
      x: <Ind>Bill</Ind>
      x: <Ind>William</Ind>
    -->
    <Atom>
      <Rel>employee</Rel>
      <Var>x</Var>
    </Atom>
  </Query>
  <Assert>

    <!-- Equations may be universally quantified, although this is not very meaningful.
         This is a degenerate case, corresponding to the body of an implication being empty.
         The following is the reflexive property of equality:
         Everything is equal to itself.
    -->
    <Forall>
      <Var>x</Var>
      <Equal>
        <Var>x</Var>
        <Var>x</Var>
      </Equal>
    </Forall>
  </Assert>
  <Query>
    <!--
      What is equal to itself?
      Answers:
      x: <Ind>Bill</Ind>
      x: <Ind>William</Ind>
    -->
    <Equal>
      <Var>x</Var>
      <Var>x</Var>
    </Equal>
  </Query>

  <Assert>
    <!-- Non-ground facts are allowed. 
         John likes everything.
    -->
    <Forall>
      <Var>x</Var>
      <Atom>
        <Rel>likes</Rel>
        <Ind>John</Ind>
        <Var>x</Var>
      </Atom>
    </Forall>
  </Assert>
  <Query>
    <!-- 
      Does John like Bill?
      Answers:
      Succeeds.
    -->
    <Atom>
      <Rel>likes</Rel>
      <Ind>John</Ind>
      <Ind>Bill</Ind>
    </Atom>
  </Query>

  <Assert>
    <!-- Equations are allowed in the body of (existential) implications, 
         but this also is not very meaningful,
         as the equation could be removed by substitution. 
         If someone is the same as Margaret, then they supervise someone.   
    -->
    <Forall>
      <Var>x</Var>
      <Implies>
        <if>
          <Equal>
            <Ind>Margaret</Ind>
            <Var>x</Var>
          </Equal>
        </if>
        <then>
          <Exists>
            <Var>y</Var>
            <Atom>
              <Rel>supervises</Rel>
              <Var>x</Var>
              <Var>y</Var>
            </Atom>
          </Exists>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Query>
    <!-- 
      Does Margaret supervise someone?
      Answer:
      Succeeds      
    -->
    <Exists>
      <Var>y</Var>
      <Atom>
        <Rel>supervises</Rel>
        <Ind>Margaret</Ind>
        <Var>y</Var>
      </Atom>
    </Exists>
  </Query>

  <Assert>
    <!-- Pairwise Disjoint Classes
         Nothing is both an employee and a department.
    -->
    <Forall>
      <Var>x</Var>
      <Implies>
        <if>
          <And>
            <Atom>
              <Rel>employee</Rel>
              <Var>x</Var>
            </Atom>
            <Atom>
              <Rel>department</Rel>
              <Var>x</Var>
            </Atom>
          </And>
        </if>
        <then>
          <Or/>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Query>
    <!-- 
      What things are both employees and departments?
      Answer:
      Fails.
      Furthermore, any additional assertion that something is both
      employee and department will make the rulebase inconsistent.
    -->
    <And>
      <Atom>
        <Rel>employee</Rel>
        <Var>x</Var>
      </Atom>
      <Atom>
        <Rel>department</Rel>
        <Var>x</Var>
      </Atom>
    </And>
  </Query>

  <Assert>
    <!-- Functionality Constraint: 
      Everyone (or everything) has at most one superviser. 
    -->
    <Forall>
      <Var>x</Var>
      <Var>y</Var>
      <Var>z</Var>
      <Implies>
        <if>
          <And>
            <Atom>
              <Rel>supervises</Rel>
              <Var>x</Var>
              <Var>z</Var>
            </Atom>
            <Atom>
              <Rel>supervises</Rel>
              <Var>y</Var>
              <Var>z</Var>
            </Atom>
          </And>
        </if>
        <then>
          <Equal>
            <Var>x</Var>
            <Var>y</Var>
          </Equal>
        </then>
      </Implies>
    </Forall>
    <Atom>
      <Rel>supervises</Rel>
      <Ind>Bill</Ind>
      <Ind>Margaret</Ind>
    </Atom>
    <Atom>
      <Rel>supervises</Rel>
      <Ind>Bill</Ind>
      <Ind>Peggy</Ind>
    </Atom>
  </Assert>
  <Query>
    <!-- 
      Is Peggy the same as Margaret?
      Answer:
      Succeeds.
    -->
    <Equal>
      <Ind>Peggy</Ind>
      <Ind>Margaret</Ind>
    </Equal>
  </Query>

  <Assert>
    <!-- Negative Constraints are allowed.
         No one (or no thing) is their own supervisor. -->
    <Forall>
      <Var>x</Var>
      <Implies>
        <if>
          <Atom>
            <Rel>supervises</Rel>
            <Var>x</Var>
            <Var>x</Var>
          </Atom>
        </if>
        <then>
          <Or/>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Query>
    <!-- 
      What thing is its own supervisor?
      Answer: 
      Fails.
      Furthermore, any additional assertion that something is
      its own supervisor will make the rulebase inconsistent.
    -->
    <Atom>
      <Rel>supervises</Rel>
      <Var>x</Var>
      <Var>x</Var>
    </Atom>
  </Query>

  <Assert>
    <!-- Equations may appear in the body of negative constraints.
         The simplest case is the assertion that two individuals
         are different.-->
    <Implies>
      <if>
        <Equal>
          <Ind>Sue</Ind>
          <Ind>Maria</Ind>
        </Equal>
      </if>
      <then>
        <Or/>
      </then>
    </Implies>
  </Assert>
  <Query>
    <!-- 
      Is Sue the same as Maria?
      Answer:
      Fails.
    -->
    <Equal>
      <Ind>Sue</Ind>
      <Ind>Maria</Ind>
    </Equal>
  </Query>

  <Assert>
    <!-- Existential Rules -->
    <!-- Every manager directs at least one department. -->
    <Forall>
      <Var>M</Var>
      <Implies>
        <if>
          <Atom>
            <Rel>manager</Rel>
            <Var>M</Var>
          </Atom>
        </if>
        <then>
          <Exists>
            <Var>P</Var>
            <Atom>
              <Rel>directs</Rel>
              <Var>M</Var>
              <Var>P</Var>
            </Atom>
          </Exists>
        </then>
      </Implies>
    </Forall>
    <Atom>
      <Rel>manager</Rel>
      <Ind>Maria</Ind>
    </Atom>
  </Assert>
  <Query>
    <!-- 
      Does Maria direct a department?
      Answer:
      Succeeds.
    -->
    <Exists>
      <Var>P</Var>
      <Atom>
        <Rel>directs</Rel>
        <Ind>Maria</Ind>
        <Var>P</Var>
      </Atom>
    </Exists>
  </Query>

  <Assert>
    <!-- The heads and bodies of existential rules can contain conjunctions. -->
    <!-- Every employee who directs a department is a manager, and supervises at least another employee who works in the same department -->
    <Forall>
      <Var>E</Var>
      <Var>P</Var>
      <Implies>
        <if>
          <And>
            <Atom>
              <Rel>employee</Rel>
              <Var>E</Var>
            </Atom>
            <Atom>
              <Rel>directs</Rel>
              <Var>E</Var>
              <Var>P</Var>
            </Atom>
          </And>
        </if>
        <then>
          <Exists>
            <Var>E'</Var>
            <And>
              <Atom>
                <Rel>manager</Rel>
                <Var>E</Var>
              </Atom>
              <Atom>
                <Rel>supervises</Rel>
                <Var>E</Var>
                <Var>E'</Var>
              </Atom>
              <Atom>
                <Rel>works_in</Rel>
                <Var>E'</Var>
                <Var>P</Var>
              </Atom>
            </And>
          </Exists>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Query>
    <!-- 
      Does Maria supervise someone?
      Answer:
      Succeeds.
    -->
    <Exists>
      <Var>E'</Var>
      <Atom>
        <Rel>supervises</Rel>
        <Var>E</Var>
        <Var>E'</Var>
      </Atom>
    </Exists>
  </Query>
</RuleML>
