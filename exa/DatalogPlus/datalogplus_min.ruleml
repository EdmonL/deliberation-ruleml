<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://deliberation.ruleml.org/1.01/relaxng/datalogplus_min_relaxed.rnc"?>
<RuleML xmlns="http://ruleml.org/spec">
  <!-- Some of these examples are from
    "A general Datalog-based framework for tractable query answering 
    over ontologies",
    Andrea CalÃ¬,
    Georg Gottlob
    Thomas Lukasiewicz  
    http://dx.doi.org/10.1016/j.websem.2012.03.001
  	(preprint at http://www.websemanticsjournal.org/index.php/ps/article/view/289)
    -->

  <!-- This RuleML Document incrementally asserts into, retracts from and 
       queries a rulebase (within the <RuleML> element) for a total of
       28 transactions: 13 Asserts, 2 Retracts and 13 Queriess.
       Each Query demonstrates the semantics of the previous Assert or Retract
       by providing (in the XML comments) the expected answer to the Query.
    -->
  <Assert>
    <!-- Equations are allowed as facts:
         William is an employee.
         "Bill" is an alias for "William".
      -->
    <Atom>
      <Rel>employee</Rel>
      <Ind>William</Ind>
    </Atom>
    <Equal>
      <Ind>Bill</Ind>
      <Ind>William</Ind>
    </Equal>
  </Assert>
  <Query>
    <!-- 
        Who are the employees?
        Answers: 
        x: <Ind>Bill</Ind>
        x: <Ind>William</Ind>
      -->
    <Atom>
      <Rel>employee</Rel>
      <Var>x</Var>
    </Atom>
  </Query>
  
  <Assert>
    <!-- Equations may be universally quantified.
         This fact is a degenerate case, corresponding to the body of an implication being empty.
         The following makes the reflexive property of equality explicit (as built into most systems):
         Everything is equal to itself.
      -->
    <Forall>
      <Var>x</Var>
      <Equal>
        <Var>x</Var>
        <Var>x</Var>
      </Equal>
    </Forall>
  </Assert>
  <Query>
    <!--
        What is equal to itself?
        Answers:
        x: <Ind>Bill</Ind>
        x: <Ind>William</Ind>
      -->
    <Equal>
      <Var>x</Var>
      <Var>x</Var>
    </Equal>
  </Query>

  <Assert>
    <!-- Non-ground facts are allowed. 
         John is the CEO.
         John is responsible for everything.
      -->
    <Atom>
      <Rel>CEO</Rel>
      <Ind>John</Ind>
    </Atom>
    <Forall>
      <Var>x</Var>
      <Atom>
        <Rel>responsible_for</Rel>
        <Ind>John</Ind>
        <Var>x</Var>
      </Atom>
    </Forall>
  </Assert>
  <Query>
    <!-- 
        Is John responsible for Bill?
        Answers:
        Succeeds.
      -->
    <Atom>
      <Rel>responsible_for</Rel>
      <Ind>John</Ind>
      <Ind>Bill</Ind>
    </Atom>
  </Query>
  
  <Assert>
    <!-- Rules are expressed as universally-quantified implications.
         A simple rules can be used to assert a subclass relationship:
         Every manager is an employee.         
      -->
    <Forall>
      <Var>x</Var>
      <Implies>
        <if>
          <Atom>
            <Rel>manager</Rel>
            <Var>x</Var>
          </Atom>
        </if>
        <then>
          <Atom>
            <Rel>employee</Rel>
            <Var>x</Var>
          </Atom>
        </then>
      </Implies>
    </Forall>
    <Atom>
      <Rel>manger</Rel>
      <Ind>John</Ind>
    </Atom>
  </Assert>
  <Query>
    <!-- 
        Who are the employees?
        Answers: 
        x: <Ind>Bill</Ind>
        x: <Ind>William</Ind>
        x: <Ind>John</Ind>
      -->
    <Atom>
      <Rel>employee</Rel>
      <Var>x</Var>
    </Atom>
  </Query>
  
  <Assert>
    <!-- Equations are allowed in the body of (existential) implications. 
         If anyone is the same as Margaret, then they supervise someone.
         (Note that this rule could be semantically simplified 
         to an existential fact relying on axioms of equality.)
      -->
    <Forall>
      <Var>x</Var>
      <Implies>
        <if>
          <Equal>
            <Ind>Margaret</Ind>
            <Var>x</Var>
          </Equal>
        </if>
        <then>
          <Exists>
            <Var>y</Var>
            <Atom>
              <Rel>supervises</Rel>
              <Var>x</Var>
              <Var>y</Var>
            </Atom>
          </Exists>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Query>
    <!-- 
        Does Margaret supervise someone?
        Answer:
        Succeeds      
      -->
    <Exists>
      <Var>y</Var>
      <Atom>
        <Rel>supervises</Rel>
        <Ind>Margaret</Ind>
        <Var>y</Var>
      </Atom>
    </Exists>
  </Query>

  <Assert>
    <!-- Pairwise Disjoint Classes
         Nothing is both an employee and a department.
      -->
    <Forall>
      <Var>x</Var>
      <Implies>
        <if>
          <And>
            <Atom>
              <Rel>employee</Rel>
              <Var>x</Var>
            </Atom>
            <Atom>
              <Rel>department</Rel>
              <Var>x</Var>
            </Atom>
          </And>
        </if>
        <then>
          <Or/>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Assert>
    <!-- HR is an employee.
         HR is a department.
         These facts together with the previous rule creates an inconsistency.
      -->
    <Atom>
      <Rel>employee</Rel>
      <Ind>HR</Ind>
    </Atom>
    <Atom>
      <Rel>department</Rel>
      <Ind>HR</Ind>
    </Atom>
  </Assert>
  <Query>
    <!-- Is there any inconsistency?
        Succeeds, indicating inconsistency. 
      -->
    <Or/>
  </Query>
  <Retract>
    <!-- Remove that HR is an employee. -->
    <Atom>
      <Rel>employee</Rel>
      <Ind>HR</Ind>
    </Atom>
  </Retract>
  <Query>
    <!-- Is there any inconsistency?
        Fails, indicating consistency. 
      -->
    <Or/>
  </Query>
  <Assert>
    <!-- Functionality Constraint: 
        Everyone (or everything) has at most one supervisor. 
      -->
    <Forall>
      <Var>x</Var>
      <Var>y</Var>
      <Var>z</Var>
      <Implies>
        <if>
          <And>
            <Atom>
              <Rel>supervises</Rel>
              <Var>x</Var>
              <Var>z</Var>
            </Atom>
            <Atom>
              <Rel>supervises</Rel>
              <Var>y</Var>
              <Var>z</Var>
            </Atom>
          </And>
        </if>
        <then>
          <Equal>
            <Var>x</Var>
            <Var>y</Var>
          </Equal>
        </then>
      </Implies>
    </Forall>
    <Atom>
      <Rel>supervises</Rel>
      <Ind>Margaret</Ind>
      <Ind>Bill</Ind>
    </Atom>
    <Atom>
      <Rel>supervises</Rel>
      <Ind>Peggy</Ind>
      <Ind>Bill</Ind>
    </Atom>
  </Assert>
  <Query>
    <!-- 
        Is Peggy the same as Margaret?
        Answer:
        Succeeds.
      -->
    <Equal>
      <Ind>Peggy</Ind>
      <Ind>Margaret</Ind>
    </Equal>
  </Query>

  <Assert>
    <!-- Negative Constraints are allowed.
         No one (or no thing) is their own supervisor. 
      -->
    <Forall>
      <Var>x</Var>
      <Implies>
        <if>
          <Atom>
            <Rel>supervises</Rel>
            <Var>x</Var>
            <Var>x</Var>
          </Atom>
        </if>
        <then>
          <Or/>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Assert>
    <!-- Margaret supervises Peggy. -->
    <Atom>
      <Rel>supervises</Rel>
      <Ind>Margaret</Ind>
      <Ind>Peggy</Ind>
    </Atom>
  </Assert>
  <Query>
    <!-- Is there any inconsistency?
        Succeeds, indicating inconsistency. -->
    <Or/>
  </Query>
  <Retract>
    <!-- Remove that Margaret supervises Peggy. -->
    <Atom>
      <Rel>supervises</Rel>
      <Ind>Margaret</Ind>
      <Ind>Peggy</Ind>
    </Atom>
  </Retract>
  <Query>
    <!-- Is there any inconsistency?
        Fails, indicating consistency. -->
    <Or/>
  </Query>
  <Assert>
    <!-- Equations may appear in the body of negative constraints.
         The simplest case is the assertion that two individuals
         are different (as built into systems making the unique name assumption).
      -->
    <Implies>
      <if>
        <Equal>
          <Ind>Sue</Ind>
          <Ind>Maria</Ind>
        </Equal>
      </if>
      <then>
        <Or/>
      </then>
    </Implies>
  </Assert>
  <Query>
    <!-- 
        Is Sue the same as Maria?
        Answer:
        Fails.
      -->
    <Equal>
      <Ind>Sue</Ind>
      <Ind>Maria</Ind>
    </Equal>
  </Query>

  <Assert>
    <!-- Existential Rules -->
    <!-- Every manager directs at least one department.
         Maria is a manager.
      -->
    <Forall>
      <Var>M</Var>
      <Implies>
        <if>
          <Atom>
            <Rel>manager</Rel>
            <Var>M</Var>
          </Atom>
        </if>
        <then>
          <Exists>
            <Var>P</Var>
            <Atom>
              <Rel>directs</Rel>
              <Var>M</Var>
              <Var>P</Var>
            </Atom>
          </Exists>
        </then>
      </Implies>
    </Forall>
    <Atom>
      <Rel>manager</Rel>
      <Ind>Maria</Ind>
    </Atom>
  </Assert>
  <Query>
    <!-- 
        Does Maria direct a department?
        Answer:
        Succeeds.
      -->
    <Exists>
      <Var>P</Var>
      <Atom>
        <Rel>directs</Rel>
        <Ind>Maria</Ind>
        <Var>P</Var>
      </Atom>
    </Exists>
  </Query>

  <Assert>
    <!-- The heads and bodies of existential rules can contain conjunctions.
         Every employee who directs a department is a manager, and supervises at 
         least another employee who works in the same department.
      -->
    <Forall>
      <Var>E</Var>
      <Var>P</Var>
      <Implies>
        <if>
          <And>
            <Atom>
              <Rel>employee</Rel>
              <Var>E</Var>
            </Atom>
            <Atom>
              <Rel>directs</Rel>
              <Var>E</Var>
              <Var>P</Var>
            </Atom>
          </And>
        </if>
        <then>
          <Exists>
            <Var>E'</Var>
            <And>
              <Atom>
                <Rel>manager</Rel>
                <Var>E</Var>
              </Atom>
              <Atom>
                <Rel>supervises</Rel>
                <Var>E</Var>
                <Var>E'</Var>
              </Atom>
              <Atom>
                <Rel>works_in</Rel>
                <Var>E'</Var>
                <Var>P</Var>
              </Atom>
            </And>
          </Exists>
        </then>
      </Implies>
    </Forall>
  </Assert>
  <Query>
    <!-- 
        Does Maria supervise someone?
        Answer:
        Succeeds.
      -->
    <Exists>
      <Var>E'</Var>
      <Atom>
        <Rel>supervises</Rel>
        <Ind>Maria</Ind>
        <Var>E'</Var>
      </Atom>
    </Exists>
  </Query>
</RuleML>
