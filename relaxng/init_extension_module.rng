<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns="http://relaxng.org/ns/structure/1.0">
  <dc:title>RuleML Initializing Base Patterns</dc:title>
  <dc:version>0.91.01</dc:version>
  <dc:creator>Tara Athan (taraathan AT gmail.com</dc:creator>
  <dc:subject>RuleML, initialize, base patterns</dc:subject>
  <dc:description>auxiliary module for initializing base patterns.</dc:description>
  <dc:date>2011-04-18</dc:date>
  <dc:language>en</dc:language>
  <dc:rights>TBD</dc:rights>
  <dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
  <start combine="choice">
    <notAllowed/>
  </start>
  <!---->
  <define name="arg.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="op_Atom.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="op_Expr.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Implies.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="body_Implies.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Entails.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="body_Entails.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="torso.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="lhs.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="rhs.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_And.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Or.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Forall.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Exists.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_AssertRetract.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Query.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Rulebase.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="declare.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="weak.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="strong.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="cardinality.value" combine="choice">
    <notAllowed/>
  </define>
  <define name="interpretation.value" combine="choice">
    <notAllowed/>
  </define>
  <define name="val.value" combine="choice">
    <notAllowed/>
  </define>
  <define name="Rel.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="Fun.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="Var.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="Ind.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="oid.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="repo.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="resl.content" combine="choice">
    <notAllowed/>
  </define>
  <!-- Nonlinear Interaction of Stripe-skipping and Positional Independence -->
  <define name="body_Implies-ss.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Implies-ss.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="body_Entails-ss.content" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Entails-ss.content" combine="choice">
    <notAllowed/>
  </define>
  <!--
    
    ATTRIBUTE LISTS
  -->
  <define name="Neg.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Rel.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Fun.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Naf.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Ind.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Var.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Expr.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Equal.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Resource.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Type.attlist" combine="interleave">
    <empty/>
  </define>
  <!--
    
    SEQUENCES
  -->
  <define name="slotTermsForAtoms.sequence" combine="choice">
    <empty/>
  </define>
  <define name="slotTermsForExpressions.sequence" combine="choice">
    <empty/>
  </define>
  <define name="termsPlus.sequence" combine="choice">
    <notAllowed/>
  </define>
  <define name="termsForAtoms.sequence" combine="choice">
    <empty/>
  </define>
  <define name="termsForExpressions.sequence" combine="choice">
    <empty/>
  </define>
  <define name="slotsForExpressions.sequence" combine="choice">
    <empty/>
  </define>
  <define name="argumentsForExpressions.sequence" combine="choice">
    <empty/>
  </define>
  <define name="positionalArgumentsForExpressions.sequence" combine="choice">
    <empty/>
  </define>
  <!--
    
    HEADERS
  -->
  <define name="Performative.header" combine="interleave">
    <empty/>
  </define>
  <define name="Object.header" combine="interleave">
    <empty/>
  </define>
  <define name="SimpleFormula.header" combine="interleave">
    <empty/>
  </define>
  <define name="CompoundFormula.header" combine="interleave">
    <empty/>
  </define>
  <define name="Formula.header" combine="interleave">
    <empty/>
  </define>
  <define name="Fuzzy.header" combine="interleave">
    <empty/>
  </define>
  <define name="FuzzyFormula-header.choice" combine="choice">
    <empty/>
  </define>
  <define name="And.header" combine="interleave">
    <empty/>
  </define>
  <define name="Or.header" combine="interleave">
    <empty/>
  </define>
  <define name="Atom.header" combine="interleave">
    <empty/>
  </define>
  <define name="Equal.header" combine="interleave">
    <empty/>
  </define>
  <define name="Equivalent.header" combine="interleave">
    <empty/>
  </define>
  <define name="Expr.header" combine="interleave">
    <empty/>
  </define>
  <define name="Implies.header" combine="interleave">
    <empty/>
  </define>
  <define name="Entails.header" combine="interleave">
    <empty/>
  </define>
  <define name="Rulebase.header" combine="interleave">
    <empty/>
  </define>
  <define name="Naf.header" combine="interleave">
    <empty/>
  </define>
  <define name="Neg.header" combine="interleave">
    <empty/>
  </define>
  <define name="RuleML.header" combine="interleave">
    <empty/>
  </define>
  <define name="AssertRetract.header" combine="interleave">
    <empty/>
  </define>
  <define name="Query.header" combine="interleave">
    <empty/>
  </define>
  <define name="Plex_Any.header" combine="interleave">
    <empty/>
  </define>
  <define name="Plex_repo.header" combine="interleave">
    <empty/>
  </define>
  <define name="Ples_resl.header" combine="interleave">
    <empty/>
  </define>
  <define name="Forall.header" combine="interleave">
    <empty/>
  </define>
  <define name="Exists.header" combine="interleave">
    <empty/>
  </define>
  <!-- MAIN -->
  <define name="And.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Or.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Atom.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Equal.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Equivalent.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Expr.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Implies.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Entails.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Rulebase.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Naf.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Neg.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="RuleML.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="AssertRetract.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Query.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Plex_Any.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Plex_repo.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Ples_resl.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Forall.main" combine="choice">
    <notAllowed/>
  </define>
  <define name="Exists.main" combine="choice">
    <notAllowed/>
  </define>
  <!--
    
    ATTRIBUTES
  -->
  <define name="cardinality-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="closure-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="mapClosure-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="direction-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="mapDirection-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="interpretation-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="material-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="mapMaterial-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="oriented-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="singlevalued-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="weight-att.choice" combine="choice">
    <notAllowed/>
  </define>
  <!--
    
    TERM CHOICE PATTERNS
  -->
  <define name="DataTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="SimpleKeyTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="SimpleConstantTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="CompoundKeyTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="CompoundTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="IrregularKeyTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="AnyTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="leftTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="rightTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="slotKeyTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="slotFillerTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="SimpleQuantifiableTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="repoTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="reslTerm.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="SequenceMarker.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="SlotSequenceMarker.choice" combine="choice">
    <notAllowed/>
  </define>
  <!--
    
    Node renaming and internationalizatio
  -->
  <define name="And-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="And-fo-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="And-Query-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Or-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Or-dis-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Or-fo-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Or-Query-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Atom-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="SimpleFormula-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Predicate-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Data-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Data_any-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Data_simple-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Equal-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Equivalent-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Expression-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Function-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Implication-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Implication-fo-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Rulebase-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Entails-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="NegationAsFailure-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Negation-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Negation-fo-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Assert-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Retract-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="AssertRetract-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Query-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Plex_Any-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Plex_repo-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Plex_resl-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Forall-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Forall-fo-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Exists-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Exists-fo-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Variable-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Reify-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Skolem-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="Individual-node.choice" combine="choice">
    <notAllowed/>
  </define>
  <!---->
  <define name="NegationAsFailure-node.notallowed" combine="interleave">
    <notAllowed/>
  </define>
  <!--
    
    FORMULA CHOICE PATTERNS
  -->
  <define name="AndFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="OrFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="PremiseFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="ConclusionFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="ForallFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="ExistsFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="RulebaseFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="AssertRetractFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="QueryFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="NegFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="NafFormula.choice" combine="choice">
    <notAllowed/>
  </define>
  <!--
    
    role re-naming and stripe-skipping choice patterns
  -->
  <define name="formula_And-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Or-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="operatorForAtoms-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="objectIdentifier-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="leftSide-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="rightSide-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="torso-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="operatorForExpressions-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="degree-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="body_Implies.name.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Implies.name.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="body_Implies-ss.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Implies-ss.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Rulebase-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="body_Entails.name.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Entails.name.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="body_Entails-ss.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="head_Entails-ss.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="weak-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="strong-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_AssertRetract-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Query-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="declare-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Forall-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="formula_Exists-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="restOfPositionalArguments-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="restOfSlots-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="slot-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="positionalArgument-edge.choice" combine="choice">
    <notAllowed/>
  </define>
  <!--
    
    Choice patterns for all Nodes, all edges.
    Used for start and Reify
  -->
  <define name="Node.choice" combine="choice">
    <notAllowed/>
  </define>
  <define name="edge.choice" combine="choice">
    <notAllowed/>
  </define>
</grammar>
