<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.ruleml.org/0.91/xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ruleml="http://www.ruleml.org/0.91/xsd">
  <xs:import namespace="http://www.w3.org/2001/XMLSchema-instance" schemaLocation="explicit_datatyping_extension_module.xsd"/>
  <!--
    This module declares the following RuleML elements and attributes:
               * <Var>
  -->
  <xs:group name="SimpleQuantifiableTerm.choice">
    <xs:annotation>
      <xs:documentation>terms that can be bound by a quantifier include variables.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:group ref="ruleml:Variable-node.choice"/>
    </xs:sequence>
  </xs:group>
  <xs:group name="Variable-node.choice">
    <xs:annotation>
      <xs:documentation>an extension point for alternate spellings and internationalization of the variable tag name. </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="ruleml:Var"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="Var">
    <xs:annotation>
      <xs:documentation>A logical variable, as in logic programming.
See http://www.ruleml.org/0.91/glossary/#gloss-Var</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="ruleml:Var.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Var.attlist">
    <xs:annotation>
      <xs:documentation>Variables optionally accept the attribute pattern of objects with user-defined types.</xs:documentation>
    </xs:annotation>
    <xs:attributeGroup ref="ruleml:Type.attlist"/>
  </xs:attributeGroup>
</xs:schema>
<!--
  
  Optional initialization module allows this module to be independently validated
  include "init_extension_module.rnc"
-->
