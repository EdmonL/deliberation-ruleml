<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0">
  <dc:title>RuleML Conjunctions and Disjunctions</dc:title>
  <dc:version>0.91.01</dc:version>
  <dc:creator>Tara Athan (taraathan AT gmail.com</dc:creator>
  <dc:subject>RuleML, conjunction, disjunction</dc:subject>
  <dc:description>The auxiliary module for conjunctions and disjunctions.</dc:description>
  <dc:date>2011-04-18</dc:date>
  <dc:language>en</dc:language>
  <dc:rights>TBD</dc:rights>
  <dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
  <start combine="choice">
    <choice>
      <ref name="andor.Node.defs"/>
      <ref name="andor.edge.defs"/>
    </choice>
  </start>
  <!--
    This module declares the following RuleML elements and attributes:
               * <And>
               * <Or>
               * <formula>
    This module also declares the following RuleML choice pattern:
               * AndFormula.choice
               * OrFormula.choice
  -->
  <define name="andor.Node.defs" combine="choice">
    <choice>
      <ref name="And.Node.def"/>
      <ref name="Or.Node.def"/>
      <ref name="And-Query.Node.def"/>
      <ref name="Or-Query.Node.def"/>
    </choice>
  </define>
  <define name="andor.edge.defs" combine="choice">
    <choice>
      <ref name="formula_And.edge.def"/>
      <ref name="formula_Or.edge.def"/>
    </choice>
  </define>
  <define name="And-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the conjunction tag name.</a:documentation>
    <ref name="And.Node.def"/>
  </define>
  <define name="And.Node.def">
    <element name="And">
      <a:documentation>A conjunctive expression, where &lt;And&gt;Atom&lt;/And&gt; is equivalent to Atom.
See http://www.ruleml.org/0.91/glossary/#gloss-And
Within anything other than Query...</a:documentation>
      <ref name="And.attlist"/>
      <ref name="And.header"/>
      <ref name="And.main"/>
    </element>
  </define>
  <!-- The attribute list of the conjunction element is initialized empty , but may be over-ridden by extension modules. -->
  <define name="And.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="And-Query-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the conjunction tag name in queries.  </a:documentation>
    <ref name="And-Query.Node.def"/>
  </define>
  <define name="And-Query.Node.def">
    <element name="And">
      <a:documentation>A conjunctive expression, where &lt;And&gt;Atom&lt;/And&gt; is equivalent to Atom.
See http://www.ruleml.org/0.91/glossary/#gloss-And
Within Query...</a:documentation>
      <ref name="And-Query.attlist"/>
      <ref name="And.header"/>
      <ref name="And.main"/>
    </element>
  </define>
  <define name="And-Query.attlist" combine="interleave">
    <a:documentation>Within query, conjunctions may have an optional existential closure attribute.</a:documentation>
    <optional>
      <ref name="closure-att.choice"/>
    </optional>
  </define>
  <!-- For the declaration of the closure attribute pattern, see the quantification closure module (closure_extension_module) -->
  <define name="And.header" combine="interleave">
    <a:documentation>The header section of the implication content model follows a common pattern for formulas.</a:documentation>
    <optional>
      <ref name="CompoundFormula.header"/>
    </optional>
  </define>
  <define name="CompoundFormula.header" combine="interleave">
    <a:documentation>Compound formulas are crisp (not fuzzifiable) and therefore contain only the pattern for general formulas</a:documentation>
    <optional>
      <ref name="Formula.header"/>
    </optional>
  </define>
  <!--
    The formula header may be serialization-dependent, 
    see the serialization modules (orderlax_module, orderstrict_module, ordermix_module).
  -->
  <define name="And.main" combine="choice">
    <a:documentation>The main section of the conjunction content model contains zero or more formulas.</a:documentation>
    <zeroOrMore>
      <ref name="formula_And-edge.choice"/>
    </zeroOrMore>
  </define>
  <define name="formula_And-edge.choice" combine="choice">
    <a:documentation>an extension point for stripe skipping as well as alternate spellings and internationalization of the formula tag name in conjunctions.  </a:documentation>
    <ref name="formula_And.edge.def"/>
  </define>
  <define name="formula_And.edge.def">
    <element name="formula">
      <a:documentation>The formula role of a conjunctive (&lt;And&gt;) or disjunctive (&lt;Or&gt;) expression, 
quantifier (&lt;Forall&gt; or &lt;Exists&gt;), or performative (&lt;Assert&gt;, &lt;Query&gt; or &lt;Retract&gt;).
See http://www.ruleml.org/0.91/glossary/#gloss-formula
Within And ...</a:documentation>
      <ref name="formula_And.content"/>
    </element>
  </define>
  <define name="formula_And.content" combine="choice">
    <a:documentation>Formulas within disjunctions consist of a single formula</a:documentation>
    <ref name="AndFormula.choice"/>
  </define>
  <define name="AndFormula.choice" combine="choice">
    <a:documentation>formulas allowed to participate in conjunctions. </a:documentation>
    <choice>
      <ref name="SimpleFormula-node.choice"/>
      <ref name="And-node.choice"/>
      <ref name="Or-node.choice"/>
      <ref name="Negation-node.choice"/>
      <ref name="NegationAsFailure-node.choice"/>
      <ref name="Implication-fo-node.choice"/>
      <ref name="Forall-fo-node.choice"/>
      <ref name="Exists-fo-node.choice"/>
    </choice>
  </define>
  <!--
    For the declaration of the simple formula pattern, see the atomic formula and equation modules ( atom_backbone_module and equal_module) 
    For the declaration of the strong negation formula pattern, see the strong negation module ( neg_extension_module) 
    For the declaration of the weak negation formula pattern, see the weak negation module ( naf_extension_module) 
    For the declaration of the implication pattern, see the implication modules (implication_module and equivalence_module)
    For the declaration of the quantification patterns, see the quantification module (quantifier_module)
  -->
  <define name="Or-node.choice" combine="choice">
    <a:documentation>a convenience pattern that unifies atomic formulas and equations
because equations are allowed wherever atomic formulas are allowed.</a:documentation>
    <!--
      SimpleFormula-node.choice |= Atom-node.choice | Equal-node.choice
      For the declaration of the simple formula pattern, see the atomic formula and equation modules ( atom_backbone_module and equal_module) 
    -->
    <a:documentation>an extension point for alternate spellings and internationalization of the disjunction tag name.  </a:documentation>
    <ref name="Or.Node.def"/>
  </define>
  <define name="Or.Node.def">
    <element name="Or">
      <a:documentation>A disjunctive expression, where &lt;Or&gt;Atom&lt;/Or&gt; is equivalent to Atom.
See http://www.ruleml.org/0.91/glossary/#gloss-Or</a:documentation>
      <ref name="Or.attlist"/>
      <ref name="Or.header"/>
      <ref name="Or.main"/>
    </element>
  </define>
  <!-- The attribute list of the disjunction element is initialized empty , but may be over-ridden by optional modules. -->
  <define name="Or.attlist" combine="interleave">
    <empty/>
  </define>
  <define name="Or-Query-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the disjunction tag name in queries.  </a:documentation>
    <ref name="Or-Query.Node.def"/>
  </define>
  <define name="Or-Query.Node.def">
    <element name="Or">
      <ref name="Or-Query.attlist"/>
      <ref name="Or.header"/>
      <ref name="Or.main"/>
    </element>
  </define>
  <define name="Or-Query.attlist" combine="interleave">
    <a:documentation>Within query, disjunctions may have an optional existential closure attribute.</a:documentation>
    <optional>
      <ref name="closure-att.choice"/>
    </optional>
  </define>
  <!-- For the declaration of the closure attribute pattern, see the quantification closure module (closure_extension_module) -->
  <define name="Or.header" combine="interleave">
    <a:documentation>The header section of the implication content model follows a common pattern for formulas.</a:documentation>
    <optional>
      <ref name="CompoundFormula.header"/>
    </optional>
  </define>
  <define name="Or.main" combine="choice">
    <a:documentation>The main section of the conjunction content model contains zero or more formulas.</a:documentation>
    <zeroOrMore>
      <ref name="formula_Or-edge.choice"/>
    </zeroOrMore>
  </define>
  <define name="formula_Or-edge.choice" combine="choice">
    <a:documentation>an extension point for stripe skipping as well as alternate spellings and internationalization of the formula tag name in disjunctions.  </a:documentation>
    <ref name="formula_Or.edge.def"/>
  </define>
  <define name="formula_Or.edge.def">
    <element name="formula">
      <a:documentation>The formula role of a conjunctive (&lt;And&gt;) or disjunctive (&lt;Or&gt;) expression, 
quantifier (&lt;Forall&gt; or &lt;Exists&gt;), or performative (&lt;Assert&gt;, &lt;Query&gt; or &lt;Retract&gt;).
See http://www.ruleml.org/0.91/glossary/#gloss-formula
Within Or ...</a:documentation>
      <ref name="formula_Or.content"/>
    </element>
  </define>
  <define name="formula_Or.content" combine="choice">
    <a:documentation>Formulas within disjunctions consist of a single formula</a:documentation>
    <ref name="OrFormula.choice"/>
  </define>
  <define name="OrFormula.choice" combine="choice">
    <a:documentation>formulas allowed to participate in disjunctions. </a:documentation>
    <choice>
      <ref name="SimpleFormula-node.choice"/>
      <ref name="And-node.choice"/>
      <ref name="Or-node.choice"/>
      <ref name="Negation-node.choice"/>
      <ref name="NegationAsFailure-node.choice"/>
      <ref name="Implication-fo-node.choice"/>
      <ref name="Forall-fo-node.choice"/>
      <ref name="Exists-fo-node.choice"/>
    </choice>
  </define>
  <!--
    For the declaration of the simple formula pattern, see the atomic formula and equation modules ( atom_backbone_module and equal_module) 
    For the declaration of the strong negation formula pattern, see the strong negation module ( neg_extension_module) 
    For the declaration of the weak negation formula pattern, see the weak negation module ( naf_extension_module) 
    For the declaration of the implication pattern, see the implication modules (implication_module and equivalence_module)
    For the declaration of the quantification patterns, see the quantification module (quantifier_module)
    
  -->
  <define name="Node.choice" combine="choice">
    <ref name="andor.Node.defs"/>
  </define>
  <define name="edge.choice" combine="choice">
    <ref name="andor.edge.defs"/>
  </define>
</grammar>
<!--
  Optional initialization modules allows this module to be independently validated
  include "init_extension_module.rnc"
-->
