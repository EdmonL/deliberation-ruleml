<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0">
  <dc:title>RuleML Slots</dc:title>
  <dc:version>0.91.01</dc:version>
  <dc:creator>Tara Athan (taraathan AT gmail.com</dc:creator>
  <dc:subject>RuleML, slot</dc:subject>
  <dc:description>The auxiliary module for slots.</dc:description>
  <dc:date>2011-04-18</dc:date>
  <dc:language>en</dc:language>
  <dc:rights>TBD</dc:rights>
  <dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
  <start combine="choice">
    <ref name="slot.edge.def"/>
  </start>
  <!--
    This module declares the following RuleML elements and attributes:
               * slot
               * @weight
               * @card
  -->
  <define name="slotTermsForAtoms.sequence" combine="choice">
    <a:documentation>In atomic formulas, zero or more slots are allowed.</a:documentation>
    <zeroOrMore>
      <ref name="slot-edge.choice"/>
    </zeroOrMore>
  </define>
  <define name="slotTermsForExpressions.sequence" combine="choice">
    <a:documentation>In expressions, zero or more slots are allowed.</a:documentation>
    <zeroOrMore>
      <ref name="slot-edge.choice"/>
    </zeroOrMore>
  </define>
  <!-- For the declaration of slotted rest variables, see the slotted rest variable module (resl_module). -->
  <define name="slot-edge.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the slot tag name.  </a:documentation>
    <ref name="slot.edge.def"/>
  </define>
  <define name="slot.edge.def">
    <element name="slot">
      <a:documentation>A user-defined slot (property). See http://www.ruleml.org/0.91/glossary/#gloss-slot</a:documentation>
      <ref name="slot.attlist"/>
      <ref name="slot.content"/>
    </element>
  </define>
  <define name="slot.attlist" combine="interleave">
    <a:documentation>The slot element accepts optional cardinality and  weight attributes. </a:documentation>
    <optional>
      <ref name="cardinality-att.choice"/>
    </optional>
  </define>
  <define name="slot.attlist" combine="interleave">
    <optional>
      <ref name="weight-att.choice"/>
    </optional>
  </define>
  <define name="slot.content" combine="choice">
    <a:documentation>The slot content model consists of a key (first position) and a filler (second position).</a:documentation>
    <ref name="slotKeyTerm.choice"/>
    <ref name="slotFillerTerm.choice"/>
  </define>
  <define name="slotKeyTerm.choice" combine="choice">
    <a:documentation>The key (first position) in a slot contains an interpreted term or data, which may be simple or compound.</a:documentation>
    <choice>
      <ref name="SimpleKeyTerm.choice"/>
      <ref name="CompoundTerm.choice"/>
    </choice>
  </define>
  <!-- For the declaration of term patterns, see the term module (individual_extension_module). -->
  <define name="slotFillerTerm.choice" combine="choice">
    <a:documentation>The filler (second position) in a slot contains any single term.</a:documentation>
    <ref name="AnyTerm.choice"/>
  </define>
  <!-- For the declaration of term patterns, see the term module (individual_extension_module). -->
  <define name="edge.choice" combine="choice">
    <ref name="slot.edge.def"/>
  </define>
</grammar>
<!--
  
  Optional initialization module allows this module to be independently validated
  include "init_extension_module.rnc"
-->
