namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dc:title [ "The RuleML identifier element" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, information wrapper" ]
dc:description [
  "This is the Core Schema module for the information wrapper in RuleML."
]
dc:date [ "2012-02-25" ]
dc:language [ "en" ]
dcterms:rights [ "LGPL-3.0" ]
dc:relation [ "http://wiki.ruleml.org/index.php/Relax_NG" ]
start |= Info-in-Reify.Node.def
Node.choice |= Info-in-Reify.Node.def
edge.choice |= target-in-Reify.edge.def
# This module declares the following RuleML elements and attributes:
#            * <Info>
#            * <target>

##
And-node.choice |= Info-And-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (And).  
Info-And-node.choice |= Info-And.Node.def
Info-And.Node.def = element Info { Info-And.content }
Info-And.content |=
  (Info-And-datt.choice & reInfo-And.attlist), Info-And.header, Info-And.main
Info-And.header &= Info.header?
Info-And.main |= target-And-edge.choice
target-And-edge.choice |= target-And.edge.def
target-And.edge.def = element target { target-And.content }
target-And.content |= And-node.choice

##
And-Query-node.choice |= Info-And-Query-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (And-Query).  
Info-And-Query-node.choice |= Info-And-Query.def
Info-And-Query.def = element Info { Info-And-Query.content }
Info-And-Query.content |=
  (Info-And-Query-datt.choice & reInfo-And-Query.attlist),
  Info-And-Query.header,
  Info-And-Query.main
Info-And-Query.header &= Info.header?
Info-And-Query.main |= target-And-Query-edge.choice
target-And-Query-edge.choice |= target-And-Query.edge.def
target-And-Query.edge.def = element target { target-And-Query.content }
target-And-Query.content |= And-Query-node.choice

##
Implies-node.choice |= Info-Implies-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (Implies).  
Info-Implies-node.choice |= Info-Implies.Node.def
Info-Implies.Node.def = element Info { Info-Implies.content }
Info-Implies.content |=
  (Info-Implies-datt.choice & reInfo-Implies.attlist),
  Info-Implies.header,
  Info-Implies.main
Info-Implies.header &= Info.header?
Info-Implies.main |= target-Implies-edge.choice
target-Implies-edge.choice |= target-Implies.edge.def
target-Implies.edge.def = element target { target-Implies.content }
target-Implies.content |= Implies-node.choice
# FIXME: move to init
reInfo-Implies.attlist &= empty
Info-Implies-datt.choice |= empty

##
Atom-node.choice |= Info-Atom-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (Atom).  
Info-Atom-node.choice |= Info-Atom.Node.def
Info-Atom.Node.def = element Info { Info-Atom.content }
Info-Atom.content |=
  (Info-Atom-datt.choice & reInfo-Atom.attlist),
  Info-Atom.header,
  Info-Atom.main
Info-Atom.header &= Info.header?
Info-Atom.main |= target-Atom-edge.choice
target-Atom-edge.choice |= target-Atom.edge.def
target-Atom.edge.def = element target { target-Atom.content }
target-Atom.content |= Atom-node.choice
# FIXME: move to init
reInfo-Atom.attlist &= empty
Info-Atom-datt.choice |= empty

##
Equal-node.choice |= Info-Equal-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (Equal).  
Info-Equal-node.choice |= Info-Equal.Node.def
Info-Equal.Node.def = element Info { Info-Equal.content }
Info-Equal.content |=
  (Info-Equal-datt.choice & reInfo-Equal.attlist),
  Info-Equal.header,
  Info-Equal.main
Info-Equal.header &= Info.header?
Info-Equal.main |= target-Equal-edge.choice
target-Equal-edge.choice |= target-Equal.edge.def
target-Equal.edge.def = element target { target-Equal.content }
target-Equal.content |= Equal-node.choice
# FIXME: move to init
reInfo-Equal.attlist &= empty
Info-Equal-datt.choice |= empty

##
Individual-node.choice |= Info-Ind-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (Ind).  
Info-Ind-node.choice |= Info-Ind.Node.def
Info-Ind.Node.def = element Info { Info-Ind.content }
Info-Ind.content |=
  (Info-Ind-datt.choice & reInfo-Ind.attlist), Info-Ind.header, Info-Ind.main
Info-Ind.header &= Info.header?
Info-Ind.main |= target-Ind-edge.choice
target-Ind-edge.choice |= target-Ind.edge.def
target-Ind.edge.def = element target { target-Ind.content }
target-Ind.content |= Individual-node.choice

##
Data-simple-node.choice |= Info-Data-simple-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (Data).  
Info-Data-simple-node.choice |= Info-Data-simple.Node.def
Info-Data-simple.Node.def = element Info { Info-Data-simple.content }
Info-Data-simple.content |=
  (Info-Data-simple-datt.choice & reInfo-Data-simple.attlist),
  Info-Data-simple.header,
  Info-Data-simple.main
Info-Data-simple.header &= Info.header?
Info-Data-simple.main |= target-Data-simple-edge.choice
target-Data-simple-edge.choice |= target-Data-simple.edge.def
target-Data-simple.edge.def = element target { target-Data-simple.content }
target-Data-simple.content |= Data-simple-node.choice

##
Expression-node.choice |= Info-Expr-node.choice

## an extension point for alternate spellings and internationalization of the information tag name (Expr).  
Info-Expr-node.choice |= Info-Expr.Node.def
Info-Expr.Node.def = element Info { Info-Expr.content }
Info-Expr.content |=
  (Info-Expr-datt.choice & reInfo-Expr.attlist), Info-Expr.header, Info-Expr.main
Info-Expr.header &= Info.header?
Info-Expr.main |= target-Expr-edge.choice
target-Expr-edge.choice |= target-Expr.edge.def
target-Expr.edge.def = element target { target-Expr.content }
target-Expr.content |= Expression-node.choice
# FIXME: move to init
reInfo-Expr.attlist &= empty
Info-Expr-datt.choice |= empty

## an extension point for alternate spellings and internationalization of the information tag name (in-Reify).  
Info-in-Reify-node.choice |= Info-in-Reify.Node.def
Info-in-Reify.Node.def = element Info { Info-in-Reify.content }
Info-in-Reify.content |=
  (Info-in-Reify-datt.choice & reInfo-in-Reify.attlist),
  Info-in-Reify.header,
  Info-in-Reify.main
Info-in-Reify.header &= Info.header?
Info-in-Reify.main |= target-in-Reify-edge.choice
target-in-Reify-edge.choice |= target-in-Reify.edge.def
target-in-Reify.edge.def = element target { target-in-Reify.content }
target-in-Reify.content |= target-And-Query.content
target-in-Reify.content |= target-Atom.content
target-in-Reify.content |= target-Equal.content
target-in-Reify.content |= target-Implies.content
target-in-Reify.content |= target-Ind.content
target-in-Reify.content |= target-Data-simple.content
target-in-Reify.content |= target-Expr.content
