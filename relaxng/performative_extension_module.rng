<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0">
  <dc:title>RuleML Performative Components</dc:title>
  <dc:version>0.91.01</dc:version>
  <dc:creator>Tara Athan (taraathan AT gmail.com</dc:creator>
  <dc:subject>RuleML, performative, assert, retract, query</dc:subject>
  <dc:description>The auxiliary module for performative components.</dc:description>
  <dc:date>2011-04-18</dc:date>
  <dc:language>en</dc:language>
  <dc:rights>TBD</dc:rights>
  <dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
  <start combine="choice">
    <choice>
      <ref name="performative.Node.defs"/>
      <ref name="performative.edge.defs"/>
    </choice>
  </start>
  <!--
    This module declares the following RuleML elements and attribute:
               * <RuleML> !
               * <Assert> !
               * <Retract>
               * <Query>
               * <formula>
               * AssertRetractFormula.choice
               * QueryFormula.choice
  -->
  <define name="performative.Node.defs" combine="choice">
    <a:documentation/>
    <choice>
      <ref name="RuleML.def"/>
      <ref name="Assert.Node.def"/>
      <ref name="Retract.Node.def"/>
      <ref name="Query.Node.def"/>
    </choice>
  </define>
  <define name="performative.edge.defs" combine="choice">
    <choice>
      <ref name="formula_AssertRetract.edge.def"/>
      <ref name="formula_Query.edge.def"/>
    </choice>
  </define>
  <define name="RuleML.def">
    <element name="RuleML">
      <a:documentation>The polyadic top_level of a RuleML document.
See http://www.ruleml.org/0.91/glossary/#gloss-RuleML</a:documentation>
      <ref name="RuleML.attlist"/>
      <ref name="RuleML.header"/>
      <ref name="RuleML.main"/>
    </element>
  </define>
  <!-- The attribute list of the RuleML root element is initialized empty, but may be over-ridden by optional modules. -->
  <define name="RuleML.attlist" combine="interleave">
    <empty/>
  </define>
  <!-- The header of the RuleML root element accepts the Performative header pattern. -->
  <define name="RuleML.header" combine="interleave">
    <optional>
      <ref name="Performative.header"/>
    </optional>
  </define>
  <define name="RuleML.main" combine="choice">
    <a:documentation>The RuleML root element contains zero or more performatives.</a:documentation>
    <zeroOrMore>
      <ref name="Performative.choice"/>
    </zeroOrMore>
  </define>
  <define name="Performative.choice" combine="choice">
    <a:documentation>Performatives include assertions, retractions and queries.</a:documentation>
    <choice>
      <ref name="AssertRetract-node.choice"/>
      <ref name="Query-node.choice"/>
    </choice>
  </define>
  <define name="AssertRetract-node.choice" combine="choice">
    <a:documentation>a convenience pattern combining assertions and retractions</a:documentation>
    <choice>
      <ref name="Assert-node.choice"/>
      <ref name="Retract-node.choice"/>
    </choice>
  </define>
  <define name="Assert-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the assertion tag name.  </a:documentation>
    <ref name="Assert.Node.def"/>
  </define>
  <define name="Assert.Node.def">
    <element name="Assert">
      <a:documentation>A KQML-like performative acting as a wrapper specifying that its content is 
asserted, making an 'implicit &lt;Rulebase&gt;' assumption.
See http://www.ruleml.org/0.91/glossary/#gloss-Assert</a:documentation>
      <ref name="AssertRetract.attlist"/>
      <ref name="AssertRetract.header"/>
      <ref name="AssertRetract.main"/>
    </element>
  </define>
  <define name="Retract-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the retraction tag name.  </a:documentation>
    <ref name="Retract.Node.def"/>
  </define>
  <define name="Retract.Node.def">
    <element name="Retract">
      <a:documentation>A performative similar to KQML's 'untell' that acts as a wrapper specifying that its
content is to be deleted, making an 'implicit &lt;Rulebase&gt;' assumption.
See http://www.ruleml.org/0.91/glossary/#gloss-Retract</a:documentation>
      <ref name="AssertRetract.attlist"/>
      <ref name="AssertRetract.header"/>
      <ref name="AssertRetract.main"/>
    </element>
  </define>
  <define name="AssertRetract.attlist" combine="interleave">
    <a:documentation>Assertions and retractions may have an optional scope closure attribute.</a:documentation>
    <optional>
      <ref name="mapClosure-att.choice"/>
    </optional>
  </define>
  <!--
    AssertRetract.attlist = mapDirection-att.option & mapMaterial-att.option & mapClosure-att.choice?
    For the declaration of the scope closure attribute pattern, see the quantification closure module (closure_extension_module)
  -->
  <define name="AssertRetract.header" combine="interleave">
    <a:documentation>Assertions and retractions accept the performative header pattern.</a:documentation>
    <optional>
      <ref name="Performative.header"/>
    </optional>
  </define>
  <!-- The object header is initialized to be empty, and may be over-ridden by optional modules. See the object identifier module (desc_module). -->
  <define name="AssertRetract.main" combine="choice">
    <a:documentation>Assertions and retractions contain zero or more formulas.</a:documentation>
    <zeroOrMore>
      <ref name="formula_AssertRetract-edge.choice"/>
    </zeroOrMore>
  </define>
  <define name="formula_AssertRetract-edge.choice" combine="choice">
    <a:documentation>an extension point for stripe skipping as well as alternate spellings and internationalization of the formula tag name in assertions and retractions.  </a:documentation>
    <ref name="formula_AssertRetract.edge.def"/>
  </define>
  <define name="formula_AssertRetract.edge.def">
    <element name="formula">
      <a:documentation>The formula role of a conjunctive (&lt;And&gt;) or disjunctive (&lt;Or&gt;) expression, 
quantifier (&lt;Forall&gt; or &lt;Exists&gt;), or performative (&lt;Assert&gt;, &lt;Query&gt; or &lt;Retract&gt;).
See http://www.ruleml.org/0.91/glossary/#gloss-formula
Within Assert or Retract...</a:documentation>
      <ref name="formula_AssertRetract.content"/>
    </element>
  </define>
  <define name="formula_AssertRetract.content" combine="choice">
    <a:documentation>Forumulas within assertions and retractions contain a single formula.</a:documentation>
    <ref name="AssertRetractFormula.choice"/>
  </define>
  <define name="AssertRetractFormula.choice" combine="choice">
    <a:documentation>Formulas allowed in assertions and retractions:
Simple formulas are allowed in assertions and retractions in all sub-languages.
Conjunctions and disjunctions are allowed in assertions and retractions in sub-languages that contain these components.
Implications and universal quantifications is allowed in assertions and retractions for all quantified sub-languages.
Strong and weak negation are allowed in assertions and retractions for all sub-languages that contain these components.
Existential quantification is added to assertions and retractions for full first-order sub-languages.</a:documentation>
    <choice>
      <ref name="SimpleFormula-node.choice"/>
      <ref name="And-fo-node.choice"/>
      <ref name="Or-fo-node.choice"/>
      <ref name="Negation-node.choice"/>
      <ref name="NegationAsFailure-node.notallowed"/>
      <ref name="Implication-node.choice"/>
      <ref name="Forall-node.choice"/>
      <ref name="Exists-fo-node.choice"/>
    </choice>
  </define>
  <!--
    For the declaration of the simple formula pattern, see the atomic formula and equation modules ( atom_backbone_module and equal_module) 
    For the declaration of conjunctive and disjunctive formula patterns, see the conjunction and disjunction module (andor_module)
    For the declaration of the strong negation formula pattern, see the strong negation module ( neg_extension_module) 
    For the declaration of the weak negation formula pattern, see the weak negation module ( naf_extension_module) 
    For the declaration of the implication pattern, see the implication modules (implication_module and equivalence_module)
    For the declaration of the quantification patterns, see the quantification module (quantifier_module)
    For patterns containing "fo" see the first-order logic module (folog_base_module)
  -->
  <define name="AssertRetractFormula.choice" combine="choice">
    <a:documentation>Also meta-logic statements of proof-theoretic entailment and rulebase declaration may be allowed in assertions and retractions. </a:documentation>
    <choice>
      <ref name="Entails-node.choice"/>
      <ref name="Rulebase-node.choice"/>
    </choice>
  </define>
  <!-- For the declaration of the entailment and rulebase patterns, see the meta-logic module (meta_module) -->
  <define name="Query-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the query tag name.  </a:documentation>
    <ref name="Query.Node.def"/>
  </define>
  <define name="Query.Node.def">
    <element name="Query">
      <a:documentation>A KQML-like performative acting as a wrapper specifying that its content is
queried, making an 'implicit &lt;Rulebase&gt;' assumption.
See http://www.ruleml.org/0.91/glossary/#gloss-Query</a:documentation>
      <ref name="Query.attlist"/>
      <ref name="Query.header"/>
      <ref name="Query.main"/>
    </element>
  </define>
  <define name="Query.attlist" combine="interleave">
    <a:documentation>Queries may have an optional map closure attribute.</a:documentation>
    <optional>
      <ref name="closure-att.choice"/>
    </optional>
  </define>
  <!-- For the declaration of the closure attribute pattern, see the quantification closure module (closure_extension_module) -->
  <define name="Query.header" combine="interleave">
    <a:documentation>Queries accept the header patter common to formulas.</a:documentation>
    <optional>
      <ref name="Performative.header"/>
    </optional>
  </define>
  <!--
    The object header may be positionally-dependent, 
    see the position-(in)dependence serialization modules (orderstrict_module, orderlax_module).
  -->
  <define name="Query.main" combine="choice">
    <a:documentation>The content model of queries consists of zero or more formulas.</a:documentation>
    <zeroOrMore>
      <ref name="formula_Query-edge.choice"/>
    </zeroOrMore>
  </define>
  <define name="formula_Query-edge.choice" combine="choice">
    <a:documentation>an extension point for stripe skipping as well as alternate spellings and internationalization of the formula tag name in queries.  </a:documentation>
    <ref name="formula_Query.edge.def"/>
  </define>
  <define name="formula_Query.edge.def">
    <element name="formula">
      <a:documentation>The formula role of a conjunctive (&lt;And&gt;) or disjunctive (&lt;Or&gt;) expression, 
quantifier (&lt;Forall&gt; or &lt;Exists&gt;), or performative (&lt;Assert&gt;, &lt;Query&gt; or &lt;Retract&gt;).
See http://www.ruleml.org/0.91/glossary/#gloss-formula
Within Query ...</a:documentation>
      <ref name="formula_Query.content"/>
    </element>
  </define>
  <define name="formula_Query.content" combine="choice">
    <a:documentation>The content model of a forumula within queries is a single formula.</a:documentation>
    <ref name="QueryFormula.choice"/>
  </define>
  <define name="QueryFormula.choice" combine="choice">
    <a:documentation>Formulas allowed in queries:
Simple formulas are allowed in queries in all sub-languages.
Conjunctions and disjunctions are allowed in queries in sub-languages that contain these components.
Existential quantifications is allowed in queries for all quantified sub-languages.
Strong and weak negation are allowed in queries for all sub-languages that contain these components.
Implications and universal quantification are added to queries for full first-order sub-languages.</a:documentation>
    <choice>
      <ref name="SimpleFormula-node.choice"/>
      <ref name="And-Query-node.choice"/>
      <ref name="Or-Query-node.choice"/>
      <ref name="Negation-node.choice"/>
      <ref name="NegationAsFailure-node.choice"/>
      <ref name="Implication-fo-node.choice"/>
      <ref name="Forall-fo-node.choice"/>
      <ref name="Exists-node.choice"/>
    </choice>
  </define>
  <!--
    For the declaration of the simple formula pattern, see the atomic formula and equation modules ( atom_backbone_module and equal_module) 
    For the declaration of conjunctive and disjunctive formula patterns, see the conjunction and disjunction module (andor_module)
    For the declaration of the strong negation formula pattern, see the strong negation module ( neg_extension_module) 
    For the declaration of the weak negation formula pattern, see the weak negation module ( naf_extension_module) 
    For the declaration of the implication pattern, see the implication modules (implication_module and equivalence_module)
    For the declaration of the quantification patterns, see the quantification module (quantifier_module)
  -->
  <define name="QueryFormula.choice" combine="choice">
    <a:documentation>Also meta-logic statements of proof-theoretic entailment and rulebase declaration are  allowed in queries. </a:documentation>
    <choice>
      <ref name="Entails-node.choice"/>
      <ref name="Rulebase-node.choice"/>
    </choice>
  </define>
  <!-- For the declaration of the entailment and rulebase formula pattern, see the meta-logic and rulebase modules ( meta_module and rulebase_module) -->
  <define name="Node.choice" combine="choice">
    <ref name="performative.Node.defs"/>
  </define>
  <define name="edge.choice" combine="choice">
    <ref name="performative.edge.defs"/>
  </define>
</grammar>
<!--
  
  Optional initialization module allows this module to be independently validated
  include "init_extension_module.rnc"
-->
