namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"

dc:title [ "RuleML Positional Independence" ]
dc:version [ "1.02" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, positional independence" ]
dc:description [
  "The expansion module for positional independence."
]
dc:language [ "en" ]
dcterms:rights [ "TBD" ]
dc:relation [ "http://wiki.ruleml.org/index.php/Relax_NG" ]
start |= notAllowed

## Pre-fix operator notation for atomic formulas is required in a deterministic serialization.
Atom.main |=
  operatorForAtoms-edge.choice, argumentsForAtoms.sequence

## Slotted arguments may precede or  follow positional arguments 
## in atomic formulas in the deterministic serialization. 
argumentsForAtoms.sequence |=
  slotTermsForAtoms.sequence, (((termsForAtoms.nonemptysequence.choice, repo?) | repo), slotTermsForAtoms.sequence)?, resl? 
  
repo = restOfPositionalArguments-edge.choice
  
resl = restOfSlots-edge.choice

## Pre-fix operator notation for expressions is required in the deterministic serialization.
Expr.main |=
  operatorForExpressions-edge.choice,
  argumentsForExpressions.sequence

## Slotted arguments may precede or  follow positional arguments 
## in the deterministic serialization. 
argumentsForExpressions.sequence |=
  slotTermsForExpressions.sequence, (((termsForExpressions.nonemptysequence.choice, repo?) | repo), slotTermsForExpressions.sequence)?, resl? 
 
## Positional rest arguments follow the ordinary positional arguments
## in expressions in the deterministic serialization. 
positionalArgumentsForExpressions.sequence |=
  termsForExpressions.sequence, restOfPositionalArguments-edge.choice?
  
## Slotted rest arguments follow the ordinary slots
## in expressions in the deterministic serialization. 
slotsForExpressions.sequence |=  slotTermsForExpressions.sequence, resl? 

## In the deterministic serialization, the if and then 
## of an implication can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Implies.main |=
  body_Implies.name.choice & head_Implies.name.choice

## In the deterministic serialization, the if and then 
## of a proof-theoretic entailment can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Entails.main |=
  body_Entails.name.choice & head_Entails.name.choice

## In the deterministic serialization, the order of header elements is:
## an optional header element sequence as defined in Node.header, followed by optional
## object identifier and degree
TruthValuedConnective.header &= (Node.header?, degree-edge.choice?)?
Atom.header &= (Node.header?, objectIdentifier-edge.choice?, degree-edge.choice?)?
Expr.header &= (Node.header?, objectIdentifier-edge.choice?)?

