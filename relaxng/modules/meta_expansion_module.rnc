namespace dc = "http://purl.org/dc/terms/"

dc:title [ "The RuleML Object Meta-Knowledge" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, object identifier" ]
dc:description [
  "This is the Core Schema module for in-place meta-knowledge in RuleML."
]
dc:language [ "en" ]
dc:rights [ 'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.' ]
dc:relation [ "http://deliberation.ruleml.org" ]
start |= meta.edge.def
edge.choice |= meta.edge.def
# This module declares the following RuleML elements and attributes:
#            * <meta>

## an extension point for stripe skipping as well as specializations of the meta-knowledge tag name.  
metaKnowledge-edge.choice |= meta.edge.def

## An optional container for meta-knowledge about a Node.
meta.edge.def =
  
  ## <meta>: a container for meta-knowledge. See 
  ## http://ruleml.org/1.02/glossary/#gloss-meta
  element meta { meta.type.def }
meta.type.def = meta.attlist? & AssertRetractFormula.choice
meta.attlist &= commonInit.attlist?  
# The meta-knowledge content model is equivalent to that of <formula> in <Assert>.
# See performative_content_expansion_module .

## The header for Nodes allows an arbitrary number of <meta> elements.
Node.header &= metaKnowledge-edge.choice*
