namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dc:title [ "RuleML Rulebase" ]
dc:version [ "1.02" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, rulebase" ]
dc:description [ "The expansion module for the rulebase component." ]
dc:language [ "en" ]
dcterms:rights [ "TBD" ]
dc:relation [ "http://wiki.ruleml.org/index.php/Relax_NG" ]
start |= Rulebase.Node.def
Node.choice |= Rulebase.Node.def
edge.choice |= formula_Rulebase.edge.def
# This module declares or extends the following RuleML elements and attributes:
#            * <Rulebase>
#            * <formula>

## an extension point for specializations of the rulebase tag name.  
Rulebase-node.choice |= Rulebase.Node.def
Rulebase.Node.def =
  
  ## A collection of rules that can be ordered or unordered, without or with duplicates. 
  ## See http://ruleml.org/1.02/glossary/#gloss-Rulebase
  element Rulebase { Rulebase.type.def }
Rulebase.type.def =     (Rulebase-datt.choice & reRulebase.attlist), Rulebase.header, Rulebase.main

## Rulebases may have an optional scope quantification closure attribute.
reRulebase.attlist &= mapClosure-att.choice?
# For the declaration of the scope closure attribute pattern, see the quantification closure module (closure_expansion_module)

## Rulebases accept the header pattern common to Nodes.
Rulebase.header &= Node.header?
# For the declaration of the Node header, see the modules meta_expansion_module).

## Rulebases contain zero or more formulas.
Rulebase.main |= formula_Rulebase-edge.choice*

## an extension point for stripe skipping as well as specializations of the formula tag name in rulebases.  
formula_Rulebase-edge.choice |= formula_Rulebase.edge.def
formula_Rulebase.edge.def =
  
  ## The formula role of a conjunctive (<And>) or disjunctive (<Or>) expression, 
  ## quantifier (<Forall> or <Exists>), or performative (<Assert>, <Query> or <Retract>).
  ## See http://ruleml.org/1.02/glossary/#gloss-formula
  ## Within Rulebase ...
  element formula { formula_Rulebase.type.def }
formula_Rulebase.type.def = formula_Rulebase.attlist? & formula_Rulebase.content
formula_Rulebase.content |= RulebaseFormula.choice

## formulas allowed to belong to a Rulebase: 
## Atomic formulas are allowed in rulebases.
RulebaseFormula.choice |=
  SimpleFormula-node.choice
  | And-fo-node.choice
  | Or-fo-node.choice
  | Negation-node.choice
  | NegationAsFailure-node.notallowed
  | Implication-node.choice
  | Forall-node.choice
  | Exists-fo-node.choice
# For the declaration of the simple formula pattern, see the atomic formula module ( atom_expansion_module) 
# For the declaration of conjunctive and disjunctive formula patterns, see the conjunction and disjunction module (andor_expansion_module)
# For the declaration of the strong negation formula pattern, see the strong negation module ( neg_expansion_module) 
# For the declaration of the weak negation formula pattern, see the weak negation module ( naf_expansion_module) 
# For the declaration of the implication pattern, see the implication modules (implication_expansion_module and equivalence_expansion_module)
# For the declaration of the quantification patterns, see the quantification module (quantifier_module)
formula_Rulebase.attlist &= commonInit.attlist?
reRulebase.attlist &= commonNode.attlist?
