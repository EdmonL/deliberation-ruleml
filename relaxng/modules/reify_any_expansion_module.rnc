namespace dc = "http://purl.org/dc/terms/"

namespace inherit = inherit

dc:title [ "RuleML Reification - Any" ]
dc:version [ "1.02" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, reify, reification" ]
dc:description [ "The expansion module for reification of RuleML objects." ]
dc:language [ "en" ]
dc:rights [ 'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.' ] 
dc:relation [ "http://deliberation.ruleml.org" ]
start |= Reify-any.Node.def
Node.choice |= Reify-any.Node.def
# This module declares the following RuleML elements, attributes and patterns:
#           * <Reify>

## an extension point to allow alternate names and internationalization for reification
Reify-node.choice |= Reify-any.Node.def
Reify-any.Node.def =
    
    ## Supports reification (a kind of instantiation or quasi-quotation) as needed by SWSL. 
    ## It allows any RuleML tag available within the current sublanguage as content, treating 
    ## it as a term for performing reasoning on, e.g.
    ## <Reify><Ind>John Doe</Ind></Reify>
    ## See http://ruleml.org/1.02/glossary/#gloss-Reify
    element Reify { Reify-any.type.def }
Reify-any.type.def = Reify-any.attlist? & Reify-any.content
Reify-any.attlist &= commonNode.attlist?

# This version of Reify is needed for conversion to XSD.
Reify-any.content |= AnyThis.def?
AnyThis.def =
    element inherit:* {
        attribute * { text }*,
        (text & AnyThis.def*)
    }
