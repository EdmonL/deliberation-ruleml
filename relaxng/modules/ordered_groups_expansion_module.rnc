namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"

dcterms:title [ "RuleML Positional Dependence" ]
dcterms:identifier [
  "http://deliberation.ruleml.org/1.03/relaxng/modules/ordered_groups_expansion_module.rnc"
]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, positional dependence" ]
dcterms:description [ "The expansion module for positional dependence." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= notAllowed

## Pre-fix operator notation for atomic formulas is required in a normalized serialization.
Atom.main |= operatorForAtoms-edge.choice, argumentsForAtoms.sequence

## Slotted arguments follow positional arguments in atomic formulas
## in the normalized serialization. 
argumentsForAtoms.sequence |= positionalArgumentsForAtoms.sequence, slotsForAtoms.sequence

## Positional rest arguments follow the ordinary positional arguments
## in atomic formulas in the normalized serialization. 
positionalArgumentsForAtoms.sequence |=
  termsForAtoms.sequence, restOfPositionalArguments-edge.choice?

## Slotted rest arguments follow the ordinary slots
## in atomic formulas in the normalized serialization. 
slotsForAtoms.sequence |= slotTermsForAtoms.sequence, restOfSlots-edge.choice?

## Pre-fix operator notation for expressions is required in the normalized serialization.
Expr.main |= operatorForExpressions-edge.choice, argumentsForExpressions.sequence

## Slotted arguments follow positional arguments in expressions
## in the normalized serialization. 
argumentsForExpressions.sequence |=
  positionalArgumentsForExpressions.sequence, slotsForExpressions.sequence

## Positional rest arguments follow the ordinary positional arguments
## in expressions in the normalized serialization. 
positionalArgumentsForExpressions.sequence |=
  termsForExpressions.sequence, restOfPositionalArguments-edge.choice?

## Slotted rest arguments follow the ordinary slots
## in expressions in the normalized serialization. 
slotsForExpressions.sequence |= slotTermsForExpressions.sequence, restOfSlots-edge.choice?

## In the normalized serialization, the if and then of an implication must occur in canonical order.
Implies.main |= body_Implies.name.choice, head_Implies.name.choice

## In the normalized serialization, the if and then of a proof-theoretic entailment must occur canonical order.
Entails.main |= body_Entails.name.choice, head_Entails.name.choice

## In the normalized serialization, the order of header elements in Node elements is:
## an optional header element sequence as defined in Node.header, followed by optional
## object identifier (in some elements) and degree (in some elements)
#
## The header of TruthValuedConnectives includes the Node header
## followed by an optional (uncertainty) degree.
TruthValuedConnective.header &= (Node.header?, degree-edge.choice?)?

## The header of Atoms includes the Node header
## followed by optional object identifier and (uncertainty) degree.
Atom.header &= (Node.header?, objectIdentifier-edge.choice?, degree-edge.choice?)?

## The header of Expressions includes the Node header
## followed by optional object identifier.
Expr.header &= (Node.header?, exprObjectIdentifier-edge.choice?)?
