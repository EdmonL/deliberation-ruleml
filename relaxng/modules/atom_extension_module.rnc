namespace dc = "http://purl.org/dc/elements/1.1/"

dc:title [ "RuleML Atomic Formulas" ]
dc:version [ "1.0.01" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, atom, atomic formulas, propositions" ]
dc:description [ "The auxiliary module for atomic formulas." ]
dc:date [ "2011-05-18" ]
dc:language [ "en" ]
dc:rights [ "TBD" ]
dc:relation [ "http://wiki.ruleml.org/index.php/Relax_NG" ]
start |= atom.Node.defs | atom.edge.defs
# This module declares the following RuleML elements and attributes:
#            * <Atom>
#            * <Rel>
#            * <op>
atom.Node.defs |= Atom.Node.def | Rel.Node.def
atom.edge.defs |= op_Atom.edge.def

## atomic formulas are a kind of simple formula
SimpleFormula-node.choice |= Atom-node.choice | Equal-node.choice

## an extension point for alternate spellings and internationalization of the atomic formula tag name.  
Atom-node.choice |= Atom.Node.def
Atom.Node.def =
    
    ## A logical atom, i.e. an expression formed from a Predicate (or relation) applied to a collection of its (logical) arguments.
    ## The relation (<Rel>) is followed by a sequence of zero or more arguments (<arg>). 
    ## Optional user-defined slots (<slot>) are also permitted before and/or after the arguments. 
    ## Rest variables (<repo> and <resl>) are also permitted. 
    ## See http://www.ruleml.org/1.0/glossary/#gloss-Atom
    ## Atomic formulas are divided into two sections, a header section for modifiers, and a main section for the operator and its arguments.
    ## The definitinon of the main section of an atomic formula is syntax-dependent.
    element Atom { Atom.attlist, Atom.header, Atom.main }

## Atomic formulas may have an optional closure attribute.
Atom.attlist &= closure-att.choice?
# For the declaration of the closure attribute pattern, see the quantification closure module (closure_extension_module)

## Atomic formulas accept the header pattern of simple formulas.
Atom.header &= SimpleFormula.header?

## Simple formulas are fuzzifiable.
SimpleFormula.header &= FuzzyFormula-header.choice?

## an extension point for stripe skipping as well as alternate spellings and internationalization of the operator tag name in atomic formulas.  
operatorForAtoms-edge.choice |= op_Atom.edge.def
op_Atom.edge.def =
    
    ## (context sensitive: see also expr_module and holog_module)
    ## An operator expression including a relation (<Rel>) of an atom (<Atom>).
    ## See http://www.ruleml.org/1.0/glossary/#gloss-op
    element op { op_Atom.content }

## The operator role in the context of an atomic formula is filled by a predicate.
op_Atom.content |= Relation-node.choice

## an extension point for alternate spellings and internationalization of the relation tag name.  
Relation-node.choice |= Rel.Node.def
Rel.Node.def =
    
    ## A relation, i.e. a logical Predicate, of an atom (<Atom>). It is optionally surrounded by an operator (<op>).
    ## See http://www.ruleml.org/1.0/glossary/#gloss-Rel
    element Rel { Rel.attlist, Rel.content }

## Relations accept the attribute pattern of resources.
Rel.attlist &= Resource.attlist?

## The content model for relations is text.
Rel.content |= text
#
Node.choice |= atom.Node.defs
edge.choice |= atom.edge.defs
# Optional initialization module allows this module to be independently validated
# include "init_extension_module.rnc"
