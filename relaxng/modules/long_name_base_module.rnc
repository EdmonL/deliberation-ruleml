namespace dc = "http://purl.org/dc/elements/1.1/"

dc:title [ "RuleML Long Names" ]
dc:version [ "1.0.01" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, long names" ]
dc:description [ "The auxiliary module for human-readable names." ]
dc:date [ "2011-05-18" ]
dc:language [ "en" ]
dc:rights [ "TBD" ]
dc:relation [ "http://wiki.ruleml.org/index.php/Relax_NG" ]
start |= notAllowed
#
cardinality-att.choice |= cardinality.attrib.def
cardinality.attrib.def = attribute cardinality { cardinality.value }
card.attrib.def &= notAllowed
#
interpretation-att.choice |= interpretation.attrib.def
interpretation.attrib.def = attribute interpretation { interpretation.value }
in.attrib.def &= notAllowed
#
singlevalued-att.choice |= singlevalued.attrib.def
singlevalued.attrib.def = attribute singlevalued { val.value }
val.attrib.def &= notAllowed
#
Relation-node.choice |= Relation.Node.def
Relation.Node.def = element Relation { Rel.attlist, Rel.content }
Rel.Node.def &= notAllowed
#
Expression-node.choice |= Expression.Node.def
Expression.Node.def = element Expression { Expr.attlist, Expr.header, Expr.main }
Expr.Node.def &= notAllowed
#
Function-node.choice |= Function.Node.def
Function.Node.def = element Function { Fun.attlist, Fun.content }
Fun.Node.def &= notAllowed
#
NegationAsFailure-node.choice |= NegationAsFailure.Node.def
NegationAsFailure.Node.def = element NegationAsFailure { Naf.attlist, Naf.header, Naf.main }
Naf.Node.def &= notAllowed
#
Negation-node.choice |= Negation.Node.def
Negation.Node.def = element Negation { Neg.attlist, Neg.header, Neg.main }
Neg.Node.def &= notAllowed
#
Equation-node.choice |= Equation.Node.def
Equation.Node.def = element Equation { Equal.attlist, Equal.header, Equal.main }
Equal.Node.def &= notAllowed
#
Variable-node.choice |= Variable.Node.def
Variable.Node.def = element Variable { Var.attlist, Var.content }
Var.Node.def &= notAllowed
#
Individual-node.choice |= Individual.Node.def
Individual.Node.def = element Individual { Ind.attlist, Ind.content }
Ind.Node.def &= notAllowed
#
operatorForAtoms-edge.choice |= operator_Atom.edge.def
operator_Atom.edge.def = element operator { op_Atom.content }
op_Atom.edge.def &= notAllowed
#
objectIdentifier-edge.choice |= objectIdentifier.edge.def
objectIdentifier.edge.def = element objectIdentifier { oid.content }
oid.edge.def &= notAllowed
#
operatorForExpressions-edge.choice |= operator_Expr.edge.def
operator_Expr.edge.def = element operator { op_Expr.content }
op_Expr.edge.def &= notAllowed
#
positionalArgument-edge.choice |= argument.edge.def
argument.edge.def = element argument { arg.attlist.choice, arg.content }
arg.attlist.choice |= notAllowed
arg.edge.def &= notAllowed
#
leftSide-edge.choice |= leftHandSide.edge.def
leftHandSide.edge.def = element leftHandSide { lhs.content }
lhs.edge.def &= notAllowed
#
rightSide-edge.choice |= rightHandSide.edge.def
rightHandSide.edge.def = element rightHandSide { rhs.content }
rhs.edge.def &= notAllowed
#
# include "init_extension_module.rnc"
