namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dc:title [ "RuleML Atomic Formulas" ]
dc:version [ "1.02" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, atom, atomic formulas, propositions" ]
dc:description [ "The expansion module for atomic formulas." ]
dc:language [ "en" ]
dcterms:rights [ "TBD" ]
dc:relation [ "http://deliberation.ruleml.org" ]
start |= Atom.Node.def | Rel.Node.def | Atom.Node.def | Rel.Node.def |op_Atom.edge.def
Node.choice |= Atom.Node.def | Rel.Node.def
edge.choice |= op_Atom.edge.def
# This module declares the following RuleML elements and attributes:
#            * <Atom>
#            * <Rel>
#            * <op>
# This module also declares the following RuleML choice pattern:
#            * SimpleFormula-node.choice
# Schema Design Pattern Key: see andor_expansion_module

## atomic formulas are a kind of simple formula
SimpleFormula-node.choice |= Atom-node.choice | Equal-node.choice

## an extension point for specializations of the atomic formula tag name.  
Atom-node.choice |= Atom.Node.def
Atom.Node.def =
  
  ## <Atom>: a predicate applied to arguments. See
  ## http://ruleml.org/1.02/glossary/#gloss-Atom
  element Atom { Atom.type.def }
Atom.type.def = (Atom-datt.choice & reAtom.attlist), Atom.header, Atom.main
## Atomic formulas may have an optional closure attribute.
reAtom.attlist &= closure-att.choice?
# For the declaration of the closure attribute pattern, see the quantification closure module (closure_expansion_module)

## an extension point for stripe skipping as well as specializations of the operator tag name in atomic formulas.  
operatorForAtoms-edge.choice |= op_Atom.edge.def

## (context sensitive: see also expr_module and holog_module)
## An operator expression including a relation (<Rel>) of an atom (<Atom>).
op_Atom.edge.def =
  
  ## <op>: edge (role) element for the predicate of an atomic formula. See
  ## http://ruleml.org/1.02/glossary/#gloss-op
  element op { op.type.def }
op.type.def = op_Atom.attlist? & op_Atom.content
op_Atom.attlist &= commonInit.attlist?

## The operator role in the context of an atomic formula is filled by a predicate.
op_Atom.content |= Relation-node.choice

##   
Relation-node.choice |= Rel.Node.def

## A relation, i.e. a logical Predicate, of an atom (<Atom>). It is optionally surrounded by an operator (<op>).
Rel.Node.def =
  
  ## <Rel>: a category of name used as the predicate of an atomic formula. See 
  ## http://ruleml.org/1.02/glossary/#gloss-Rel
  element Rel { Rel.type.def }
Rel.type.def = (Rel-datt.choice & reRel.attlist), Rel.content
## Relations accept the optional attribute pattern of resources.
reRel.attlist &= Resource.attlist?

## The content model for relations is the XSD datatype token.
Rel.content |= xsd:token
reAtom.attlist &= commonNode.attlist?
reRel.attlist &= commonNode.attlist?
