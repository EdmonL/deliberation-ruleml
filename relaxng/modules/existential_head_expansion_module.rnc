namespace dc = "http://purl.org/dc/terms/"

dc:title [ "RuleML Existential Rules" ]
dc:version [ "1.02" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, existential" ]
dc:description [ "The expansion module for existential heads in implications." ]
dc:language [ "en" ]
dc:rights [ 'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.' ]
dc:relation [ "http://deliberation.ruleml.org/1.02" ]
start |= notAllowed
# This module declares the following RuleML choice pattern:
  Exists-head-node.choice |= Exists-head.Node.def
  Exists-head.Node.def =
    
    ## within the head of implications
    element Exists { Exists-head.type.def }
  Exists-head.type.def = (Exists-datt.choice & reExists.attlist), Exists.header, Exists-head.main
Exists-head.main |= boundVariables.choice, formula_Exists-head-edge.choice
  formula_Exists-head-edge.choice |= formula_Exists-head.edge.def
  formula_Exists-head.edge.def =
    
    ## within the head of implications
    element formula { formula_Exists-head.type.def }
  formula_Exists-head.type.def = formula_Exists.attlist? & formula_Exists-head.content

  ##    
  formula_Exists-head.content |= ExistsHeadFormula.choice
  
  ##
  ExistsHeadFormula.choice |=
    Atom-node.choice
    | Equal-fo-node.choice
    | And-head-node.choice
    | Or-head-node.choice
    | Negation-head-node.choice
    | NegationAsFailure-node.notallowed
    | Implication-fo-node.choice
    | Forall-fo-node.choice
    | Exists-head-node.choice
