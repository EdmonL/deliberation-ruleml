namespace dc = "http://purl.org/dc/elements/1.1/"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"

dc:title [ "RuleML Positional Independence" ]
dc:version [ "1.0.01" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, positional independence" ]
dc:description [ "The auxiliary module for positional independence." ]
dc:date [ "2011-05-18" ]
dc:language [ "en" ]
dc:rights [ "TBD" ]
dc:relation [ "http://wiki.ruleml.org/index.php/Relax_NG" ]
start |= notAllowed

## Pre-fix operator notation for atomic formulas is required in a mixed-form serialization.
## Slots may occur before positional arguments in atomic formulas.
Atom.main |= operatorForAtoms-edge.choice , argumentsForAtoms.sequence
argumentsForAtoms.sequence |= slots*, positionalArgumentsForAtoms.sequence , slotsForAtoms.sequence
positionalArgumentsForAtoms.sequence |=
    termsForAtoms.sequence , restOfPositionalArguments-edge.choice?
termsForAtoms.sequence |= termsPlus.sequence?
slotsForAtoms.sequence |= slotTermsForAtoms.sequence , restOfSlots-edge.choice?

## Pre-fix operator notation for expressions is required in the mixed-form serialization.
## Slots may occur before positional arguments in expressions.
Expr.main |= operatorForExpressions-edge.choice , argumentsForExpressions.sequence
argumentsForExpressions.sequence |=
    slots*, positionalArgumentsForExpressions.sequence , slotsForExpressions.sequence
positionalArgumentsForExpressions.sequence |=
    termsForExpressions.sequence , restOfPositionalArguments-edge.choice?
termsForExpressions.sequence |= termsPlus.sequence?
slotsForExpressions.sequence |= slotTermsForExpressions.sequence , restOfSlots-edge.choice?
#

## The body and head of an implication can occur in either order if striped.
Implies.main |= body_Implies.name.choice & head_Implies.name.choice

## The body and head of a proof-theoretic entailment occur in canonical-order.
Entails.main |= body_Entails.name.choice , head_Entails.name.choice

## The object identifier occurs first in the header of fuzzifiable formulas.
FuzzyFormula-header.choice |= Formula.header , Fuzzy.header
# 
# All the RuleML roles below are made collapsible by allowing
# substitution of their content model for the role pattern.

## Stripe-skipping is allowed for positional arguments in atomic formulas and expressions.
positionalArgument-edge.choice |= arg.content

## Stripe-skipping is allowed for operators in atomic formulas.
operatorForAtoms-edge.choice |= op_Atom.content

## Stripe-skipping is allowed for operators in expressions.
operatorForExpressions-edge.choice |= op_Expr.content
# 
#        *** <body> , <head> ***

## In implications, both stripes may be skipped at the same time.
Implies.main |= body_Implies-ss.content, head_Implies.content
body_Implies-ss.content |= body_Implies.content
head_Implies-ss.content |= head_Implies.content
# Implies.main |= body_Implies-ss.content, head_Implies.name.choice
# Implies.main |= body_Implies.name.choice, head_Implies-ss.content


## In entailments, both stripes may be skipped at the same time.
Entails.main |= body_Entails-ss.content, head_Entails-ss.content
body_Entails-ss.content |= body_Entails.content
head_Entails-ss.content |= head_Entails.content
# Entails.main |= body_Entails-ss.content, head_Entails.name.choice
# Entails.main |= body_Entails.name.choice, head_Entails-ss.content

## In entailments, stripes may also be skipped asynchronously.
include "asynchronous_stripe_skipping_entailment_extension_module.rnc"

## Stripe-skipping is allowed asynchronously in equivalences.
torso-edge.choice |= torso.content

## Stripe-skipping is allowed asynchronously in equations.
leftSide-edge.choice |= lhs.content
rightSide-edge.choice |= rhs.content

## Stripe-skipping is allowed asynchronously for formulas in conjunctions.
formula_And-edge.choice |= formula_And.content

## Stripe-skipping is allowed asynchronously for formulas in disjunctions.
formula_Or-edge.choice |= formula_Or.content

## Stripe-skipping is allowed for formulas in universal quantifications.
formula_Forall-edge.choice |= formula_Forall.content

## Stripe-skipping is allowed for formulas in existential quantifications.
formula_Exists-edge.choice |= formula_Exists.content

## Stripe-skipping is allowed asynchronously for formulas in assertions and retractions.
formula_AssertRetract-edge.choice |= formula_AssertRetract.content

## Stripe-skipping is allowed asynchronously for formulas in assertions and retractions.
formula_Query-edge.choice |= formula_Query.content

## Stripe-skipping is allowed asynchronously for formulas in assertions and retractions.
formula_Rulebase-edge.choice |= formula_Rulebase.content
declare-edge.choice |= declare.content

## Stripe-skipping is allowed for weak negations.
weak-edge.choice |= weak.content

## Stripe-skipping is allowed for strong negations.
strong-edge.choice |= strong.content
# 
# Optional initialization module allows this module to be independently validated
# include "init_extension_module.rnc"

