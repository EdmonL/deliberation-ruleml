<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0">
  <dc:title>RuleML Atomic Formulas</dc:title>
  <dc:version>0.91.01</dc:version>
  <dc:creator>Tara Athan (taraathan AT gmail.com</dc:creator>
  <dc:subject>RuleML, atom, atomic formulas, propositions</dc:subject>
  <dc:description>The auxiliary module for atomic formulas.</dc:description>
  <dc:date>2011-04-18</dc:date>
  <dc:language>en</dc:language>
  <dc:rights>TBD</dc:rights>
  <dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
  <start combine="choice">
    <choice>
      <ref name="atom.Node.defs"/>
      <ref name="atom.edge.defs"/>
    </choice>
  </start>
  <!--
    This module declares the following RuleML elements and attributes:
               * <Atom>
               * <Rel>
               * <op>
  -->
  <define name="atom.Node.defs" combine="choice">
    <choice>
      <ref name="Atom.Node.def"/>
      <ref name="Rel.Node.def"/>
    </choice>
  </define>
  <define name="atom.edge.defs" combine="choice">
    <ref name="op_Atom.edge.def"/>
  </define>
  <define name="SimpleFormula-node.choice" combine="choice">
    <a:documentation>atomic formulas are a kind of simple formula</a:documentation>
    <choice>
      <ref name="Atom-node.choice"/>
      <ref name="Equal-node.choice"/>
    </choice>
  </define>
  <define name="Atom-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the atomic formula tag name.  </a:documentation>
    <ref name="Atom.Node.def"/>
  </define>
  <define name="Atom.Node.def">
    <element name="Atom">
      <a:documentation>A logical atom, i.e. an expression formed from a Predicate (or relation) applied to a collection of its (logical) arguments.
The relation (&lt;Rel&gt;) is followed by a sequence of zero or more arguments (&lt;arg&gt;). 
Optional user-defined slots (&lt;slot&gt;) are also permitted before and/or after the arguments. 
Rest variables (&lt;repo&gt; and &lt;resl&gt;) are also permitted. 
See http://www.ruleml.org/0.91/glossary/#gloss-Atom
Atomic formulas are divided into two sections, a header section for modifiers, and a main section for the operator and its arguments.
The definitinon of the main section of an atomic formula is syntax-dependent.</a:documentation>
      <ref name="Atom.attlist"/>
      <ref name="Atom.header"/>
      <ref name="Atom.main"/>
    </element>
  </define>
  <define name="Atom.attlist" combine="interleave">
    <a:documentation>Atomic formulas may have an optional closure attribute.</a:documentation>
    <optional>
      <ref name="closure-att.choice"/>
    </optional>
  </define>
  <!-- For the declaration of the closure attribute pattern, see the quantification closure module (closure_extension_module) -->
  <define name="Atom.header" combine="interleave">
    <a:documentation>Atomic formulas accept the header pattern of simple formulas.</a:documentation>
    <optional>
      <ref name="SimpleFormula.header"/>
    </optional>
  </define>
  <define name="SimpleFormula.header" combine="interleave">
    <a:documentation>Simple formulas are fuzzifiable.</a:documentation>
    <optional>
      <ref name="FuzzyFormula-header.choice"/>
    </optional>
  </define>
  <define name="operatorForAtoms-edge.choice" combine="choice">
    <a:documentation>an extension point for stripe skipping as well as alternate spellings and internationalization of the operator tag name in atomic formulas.  </a:documentation>
    <ref name="op_Atom.edge.def"/>
  </define>
  <define name="op_Atom.edge.def">
    <element name="op">
      <a:documentation>(context sensitive: see also expr_module and holog_module)
An operator expression including a relation (&lt;Rel&gt;) of an atom (&lt;Atom&gt;).
See http://www.ruleml.org/0.91/glossary/#gloss-op</a:documentation>
      <ref name="op_Atom.content"/>
    </element>
  </define>
  <define name="op_Atom.content" combine="choice">
    <a:documentation>The operator role in the context of an atomic formula is filled by a predicate.</a:documentation>
    <ref name="Relation-node.choice"/>
  </define>
  <define name="Relation-node.choice" combine="choice">
    <a:documentation>an extension point for alternate spellings and internationalization of the relation tag name.  </a:documentation>
    <ref name="Rel.Node.def"/>
  </define>
  <define name="Rel.Node.def">
    <element name="Rel">
      <a:documentation>A relation, i.e. a logical Predicate, of an atom (&lt;Atom&gt;). It is optionally surrounded by an operator (&lt;op&gt;).
See http://www.ruleml.org/0.91/glossary/#gloss-Rel</a:documentation>
      <ref name="Rel.attlist"/>
      <ref name="Rel.content"/>
    </element>
  </define>
  <define name="Rel.attlist" combine="interleave">
    <a:documentation>Relations accept the attribute pattern of resources.</a:documentation>
    <optional>
      <ref name="Resource.attlist"/>
    </optional>
  </define>
  <define name="Rel.content" combine="choice">
    <a:documentation>The content model for relations is text.</a:documentation>
    <text/>
  </define>
  <!---->
  <define name="Node.choice" combine="choice">
    <ref name="atom.Node.defs"/>
  </define>
  <define name="edge.choice" combine="choice">
    <ref name="atom.edge.defs"/>
  </define>
</grammar>
<!--
  Optional initialization module allows this module to be independently validated
  include "init_extension_module.rnc"
-->
