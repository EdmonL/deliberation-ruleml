<?xml version="1.0" encoding="UTF-8"?>
<!--
  This schema is derived from James Clark's
  RELAX NG for RELAX NG
  $Id: relaxng.rng,v 1.31 2002/05/30 06:07:43 jjc Exp $
  (translated in to RNC by Trang, of course.)
-->
<grammar ns="http://relaxng.org/ns/structure/1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rng="http://relaxng.org/ns/structure/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <dc:title>RuleML Design Pattern for Relax NG Schemas: Base Modules</dc:title>
  <dc:version>1.0.01</dc:version>
  <dc:creator>Tara Athan (taraathan AT gmail.com</dc:creator>
  <dc:subject>RuleML, design pattern</dc:subject>
  <dc:description>This meta-schema enforces the design pattern for base modules when applied to a Relax NG schema in XML-based syntax. The merger of a base grammer with an expansion module gives a language which syntactically contains the language generated by the base grammar.</dc:description>
  <dc:date>2012-04-11</dc:date>
  <dc:language>en</dc:language>
  <dc:rights>TBD</dc:rights>
  <dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
  <dc:relation>http://relaxng.org/relaxng.rng</dc:relation>
  <include href="http://relaxng.org/relaxng.rng">
    <define name="start-element">
      <element name="start">
        <ref name="combine-att.choice"/>
        <ref name="common-atts"/>
        <ref name="open-pattern"/>
      </element>
    </define>
    <!--
      Instead of 
      define-element =
       element define {
         attribute name { xsd:NCName },
         combine-att,
         common-atts,
         open-patterns
       }
    -->
    <define name="define-element">
      <choice>
        <ref name="define-element.choice"/>
        <ref name="define-element.interleave"/>
        <ref name="define-element.noCombine"/>
      </choice>
    </define>
  </include>
  <define name="define-element.choice">
    <element name="define">
      <ref name="nameNCName.choice"/>
      <ref name="combine-att.choice"/>
      <ref name="common-atts"/>
      <ref name="open-patterns"/>
    </element>
  </define>
  <define name="define-element.interleave">
    <element name="define">
      <ref name="nameNCName.interleave"/>
      <ref name="combine-att.interleave"/>
      <ref name="common-atts"/>
      <ref name="open-patterns"/>
    </element>
  </define>
  <define name="define-element.noCombine">
    <element name="define">
      <ref name="nameNCName.noCombine"/>
      <ref name="common-atts"/>
      <ref name="open-patterns"/>
    </element>
  </define>
  <define name="nameNCName.choice">
    <attribute name="name">
      <data type="NCName">
        <param name="pattern">.*\.(choice|main|content|value|datatype|sequence|defs)</param>
      </data>
    </attribute>
  </define>
  <define name="nameNCName.interleave">
    <attribute name="name">
      <data type="NCName">
        <param name="pattern">.*\.(attlist|header)</param>
      </data>
    </attribute>
  </define>
  <define name="nameNCName.noCombine">
    <attribute name="name">
      <data type="NCName">
        <param name="pattern">.*\.(def|notallowed)</param>
      </data>
    </attribute>
  </define>
  <define name="combine-att.interleave">
    <attribute name="combine">
      <value>interleave</value>
    </attribute>
  </define>
  <define name="combine-att.choice">
    <attribute name="combine">
      <value>choice</value>
    </attribute>
  </define>
</grammar>
