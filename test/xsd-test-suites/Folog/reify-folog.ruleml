<?xml version="1.0" encoding="UTF-8"?>
<RuleML xmlns="http://ruleml.org/spec"
  xmlns:vocab="http://ruleml.org/vocab"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://ruleml.org/spec ../../../xsd/folog.xsd">
  <!-- dc:rights [ 'Copyright 2015 RuleML Inc. - Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.' ]-->

  <Assert>
    <!-- S5 Structural Axioms -->
    <Rulebase>
      <!-- K: Necessary (A->B) -> (Necessary A -> Necessary B) -->
      <Forall>
        <declare>
          <Var type="vocab:core#Formula">?A</Var>
        </declare>
        <declare>
          <Var type="vocab:core#Formula">?B</Var>
        </declare>
        <Implies>
          <if>
            <Atom>
              <Rel iri="vocab:/ext#modal"/>
              <Ind iri="vocab:/kripke#Necessary"/>
              <Reify>
                <Implies>
                  <if>
                    <!-- The RuleML folog syntax does not allow quantification over predicates,
                    therefore we use a construction equivalent to an "ist" (is true) operator:
                    
                    <Atom>
                    <Rel iri="vocab:/ext#truthValue"/>
                    <Ind iri="vocab:/ext#True"/>
                    <Reify>P</Reify>
                    </Atom>
                    exactly when P is a true wff.
                    See IKL semantics @@@ref
                    
                  -->
                    <Atom>
                      <Rel iri="vocab:/ext#truthValue"/>
                      <Ind iri="vocab:/ext#True"/>
                      <Var>?A</Var>
                    </Atom>
                  </if>
                  <then>
                    <Atom>
                      <Rel iri="vocab:/ext#truthValue"/>
                      <Ind iri="vocab:/ext#True"/>
                      <Var>?B</Var>
                    </Atom>
                  </then>
                </Implies>
              </Reify>
            </Atom>
          </if>
          <then>
            <Implies>
              <if>
                <Atom>
                  <Rel iri="vocab:/ext#modal"/>
                  <Ind iri="vocab:/kripke#Necessary"/>
                  <Var>?A</Var>
                </Atom>
              </if>
              <then>
                <Atom>
                  <Rel iri="vocab:/ext#modal"/>
                  <Ind iri="vocab:/kripke#Necessary"/>
                  <Var>?B</Var>
                </Atom>
              </then>
            </Implies>
          </then>
        </Implies>
      </Forall>
      <!-- T: A is necessary implies A -->
      <Forall>
        <declare>
          <Var type="vocab:core#Formula">?A</Var>
        </declare>
        <Implies>
          <if>
            <Atom>
              <Rel iri="vocab:/ext#modal"/>
              <Ind iri="vocab:/kripke#Necessary"/>
              <Var>?A</Var>
            </Atom>
          </if>
          <then>
            <Atom>
              <Rel iri="vocab:/ext#truthValue"/>
              <Ind iri="vocab:/ext#True"/>
              <Var>?A</Var>
            </Atom>
          </then>
        </Implies>
      </Forall>
      <!-- 5: Possible A implies Necessary Possible A -->
      <Forall>
        <declare>
          <Var type="vocab:core#Formula">?A</Var>
        </declare>
        <Implies>
          <if>
            <Atom>
              <Rel iri="vocab:/ext#modal"/>
              <Ind iri="vocab:/kripke#Possible"/>
              <Var>?A</Var>
            </Atom>
          </if>
          <then>
            <Atom>
              <Rel iri="vocab:/ext#modal"/>
              <Ind iri="vocab:/kripke#Necessary"/>
              <Reify>
                <Atom>
                  <Rel iri="vocab:/ext#modal"/>
                  <Ind iri="vocab:/kripke#Possible"/>
                  <Var>?A</Var>
                </Atom>
              </Reify>
            </Atom>
          </then>
        </Implies>
      </Forall>
    </Rulebase>
  </Assert>

</RuleML>
