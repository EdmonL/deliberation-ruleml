default namespace = "http://ruleml.org/spec"
namespace ns1 = "http://www.w3.org/2001/XMLSchema-instance"

start =
  RuleML
  | Assert
  | Retract
  | Query
  | Atom
  | Rel
  | And
  | Or
  | Implies
  | Forall
  | Exists
  | Rulebase
  | Entails
  | Equivalent
  | Data
  | Skolem
  | Reify
  | Ind
  | Var
  | formula
  | formula_2
  | op
  | formula_3
  | formula_4
  | then
  | if
  | declare
  | formula_5
  | formula_6
  | formula_7
  | then_2
  | if_2
  | degree
  | meta
  | torso
  | oid
  | slot
  | arg
  | resl
  | repo
RuleML =
  element RuleML {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (act | (Assert | Retract | Query)*)+
  }
Assert =
  element Assert {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula
     | Atom
     | Implies
     | Equivalent
     | Forall
     | Entails
     | Rulebase)*
  }
Retract =
  element Retract {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula
     | Atom
     | Implies
     | Equivalent
     | Forall
     | Entails
     | Rulebase)*
  }
Query =
  element Query {
    (attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula_2 | Atom | And | Or | Exists | Entails | Rulebase)*
  }
Atom =
  element Atom {
    (attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & oid? & degree?),
    ((op | Rel)
     & (Skolem | Reify | Ind | Data | Var | arg)*
     & repo?
     & slot*
     & resl?)
  }
Rel =
  element Rel {
    (attribute iri { xsd:anyURI }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    xsd:token
  }
And =
  element And {
    (attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (formula_3 | Atom | And_2 | Or_2)*
  }
Or =
  element Or {
    (attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (formula_4 | Atom | And_2 | Or_2)*
  }
Implies =
  element Implies {
    (attribute direction { "bidirectional" | "forward" | "backward" }?
     & attribute material { "yes" | "no" }?
     & attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    ((if & then)
     | (Atom, if)
     | (then, (Atom | And_2 | Or_2))
     | ((Atom | And_2 | Or_2), Atom)
     | ((Atom | And_2 | Or_2), then)
     | (if, Atom))
  }
Forall =
  element Forall {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (declare | Var)+,
    (formula_5 | Atom | Implies | Equivalent | Forall)
  }
Exists =
  element Exists {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (declare | Var)+,
    (formula_6 | Atom | And_2 | Or_2 | Exists)
  }
Rulebase =
  element Rulebase {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (Atom | Implies | Equivalent | Forall | formula_7)*
  }
Entails =
  element Entails {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    ((if_2 & then_2)
     | ((Rulebase | Atom | Implies | Equivalent | Forall), if_2)
     | (then_2, (Rulebase | Atom | Implies | Equivalent | Forall))
     | ((Rulebase | Atom | Implies | Equivalent | Forall),
        (Rulebase | Atom | Implies | Equivalent | Forall))
     | ((Rulebase | Atom | Implies | Equivalent | Forall), then_2)
     | (if_2, (Rulebase | Atom | Implies | Equivalent | Forall)))
  }
Equivalent =
  element Equivalent {
    (attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (Atom | torso),
    (Atom | torso)
  }
Data =
  element Data {
    attribute node { xsd:anyURI }?
    & attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & text
    & _1*
  }
Skolem =
  element Skolem {
    (attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    xsd:token
  }
Reify =
  element Reify {
    attribute node { xsd:anyURI }?
    & attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (RuleML
       | Assert
       | Retract
       | Query
       | Atom
       | Rel
       | And
       | Or
       | Implies
       | Forall
       | Exists
       | Rulebase
       | Entails
       | Equivalent
       | Data
       | Skolem
       | Reify
       | Ind
       | Var)?
  }
Ind =
  element Ind {
    (attribute iri { xsd:anyURI }?
     & attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    xsd:token
  }
Var =
  element Var {
    (attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    xsd:token
  }
formula =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | Implies | Equivalent | Forall | Entails | Rulebase)
  }
formula_2 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | And | Or | Exists | Entails | Rulebase)
  }
op =
  element op {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Rel
  }
formula_3 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | And_2 | Or_2)
  }
formula_4 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | And_2 | Or_2)
  }
then =
  element then {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Atom
  }
if =
  element if {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | And_2 | Or_2)
  }
declare =
  element declare {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Var
  }
formula_5 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | Implies | Equivalent | Forall)
  }
formula_6 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | And_2 | Or_2 | Exists)
  }
formula_7 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | Implies | Equivalent | Forall)
  }
then_2 =
  element then {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Rulebase | Atom | Implies | Equivalent | Forall)
  }
if_2 =
  element if {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Rulebase | Atom | Implies | Equivalent | Forall)
  }
degree =
  element degree {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Data
  }
meta =
  element meta {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom | Implies | Equivalent | Forall | Entails | Rulebase)
  }
torso =
  element torso {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Atom
  }
oid =
  element oid {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Skolem | Reify | Ind | Data | Var)
  }
slot =
  element slot {
    (attribute card { xsd:nonNegativeInteger }?
     & attribute weight {
         xsd:decimal { minInclusive = "0.0" maxInclusive = "1.0" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (Ind | Data),
    (Skolem | Reify | Ind | Data | Var)
  }
arg =
  element arg {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (Skolem | Reify | Ind | Data | Var)
  }
resl =
  element resl {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Var
  }
repo =
  element repo {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Var
  }
act =
  element act {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (Assert | Retract | Query)*
  }
And_2 =
  element And {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (formula_3 | Atom | And_2 | Or_2)*
  }
Or_2 =
  element Or {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (formula_4 | Atom | And_2 | Or_2)*
  }
_1 =
  element * {
    attribute * { text }*,
    (text & _1*)
  }
