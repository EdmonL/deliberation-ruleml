default namespace = "http://ruleml.org/spec"
namespace ns1 = "http://www.w3.org/2001/XMLSchema-instance"

start =
  RuleML
  | Assert
  | Retract
  | Query
  | Atom
  | Rel
  | And
  | Or
  | Implies
  | Forall
  | Exists
  | Expr
  | Fun
  | Rulebase
  | Entails
  | Neg
  | Naf
  | Equivalent
  | Equal
  | Data
  | Skolem
  | Reify
  | Ind
  | Var
  | Plex
  | formula
  | formula_2
  | op
  | formula_3
  | formula_4
  | then
  | if
  | declare
  | formula_5
  | formula_6
  | op_2
  | formula_7
  | then_2
  | if_2
  | degree
  | strong
  | weak
  | meta
  | torso
  | oid
  | slot
  | left
  | right
  | arg
  | resl
  | repo
RuleML =
  element RuleML {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (act | (Assert | Retract | Query)*)+
  }
Assert =
  element Assert {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Entails
     | Rulebase)*
  }
Retract =
  element Retract {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Entails
     | Rulebase)*
  }
Query =
  element Query {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula_2
     | Atom
     | Equal
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | NegationAsFailure
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Entails
     | Rulebase)*
  }
Atom =
  element Atom {
    (attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & (oid | objectIdentifier)? & degree?),
    ((op | Rel | Relation | operator)
     & (Skolem
        | Reify
        | Ind
        | Individual
        | Data
        | Var
        | Variable
        | Expr
        | Expression
        | Plex
        | arg
        | argument)*
     & (repo | restOfPositionalArguments)?
     & slot*
     & (resl | restOfSlots)?)
  }
Rel =
  element Rel {
    (attribute iri { xsd:anyURI }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
And =
  element And {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula_3
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | NegationAsFailure
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
Or =
  element Or {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula_4
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | NegationAsFailure
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
Implies =
  element Implies {
    (attribute direction { "bidirectional" | "forward" | "backward" }?
     & attribute material { "yes" | "no" }?
     & attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    ((if & then)
     | ((Atom
         | Equal
         | And_2
         | Or_2
         | Neg
         | Negation
         | Implies
         | Equivalent
         | Forall
         | Exists),
        if)
     | (then,
        (Atom
         | Equal
         | And_2
         | Or_2
         | Neg
         | Negation
         | Naf
         | NegationAsFailure
         | Implies
         | Equivalent
         | Forall
         | Exists))
     | ((Atom
         | Equal
         | And_2
         | Or_2
         | Neg
         | Negation
         | Naf
         | NegationAsFailure
         | Implies
         | Equivalent
         | Forall
         | Exists),
        (Atom
         | Equal
         | And_2
         | Or_2
         | Neg
         | Negation
         | Implies
         | Equivalent
         | Forall
         | Exists))
     | ((Atom
         | Equal
         | And_2
         | Or_2
         | Neg
         | Negation
         | Naf
         | NegationAsFailure
         | Implies
         | Equivalent
         | Forall
         | Exists),
        then)
     | (if,
        (Atom
         | Equal
         | And_2
         | Or_2
         | Neg
         | Negation
         | Implies
         | Equivalent
         | Forall
         | Exists)))
  }
Forall =
  element Forall {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (declare | Var | Variable)+,
    (formula_5
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists)
  }
Exists =
  element Exists {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (declare | Var | Variable)+,
    (formula_6
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists)
  }
Expr =
  element Expr {
    ((attribute per { "copy" | "value" | "open" }
      | attribute interpretation { "copy" | "value" | "open" })?
     & attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & (oid | objectIdentifier)?),
    ((op_2 | Fun | Function | operator_2)
     & (Skolem
        | Reify
        | Ind
        | Individual
        | Data
        | Var
        | Variable
        | Expr
        | Expression
        | Plex
        | arg
        | argument)*
     & (repo | restOfPositionalArguments)?
     & slot*
     & (resl | restOfSlots)?)
  }
Fun =
  element Fun {
    ((attribute per { "copy" | "value" | "open" }
      | attribute interpretation { "copy" | "value" | "open" })?
     & (attribute val { "1" | "0.." }?
        | attribute singlevalued { "1" | "0.." })
     & attribute iri { xsd:anyURI }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
Rulebase =
  element Rulebase {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | formula_7)*
  }
Entails =
  element Entails {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    ((if_2 & then_2)
     | (Rulebase, if_2)
     | (then_2, Rulebase)
     | (Rulebase, Rulebase)
     | (Rulebase, then_2)
     | (if_2, Rulebase))
  }
Neg =
  element Neg {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | strong)
  }
Naf =
  element Naf {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | weak)
  }
Equivalent =
  element Equivalent {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | torso),
    (Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | torso)
  }
Equal =
  element Equal {
    (attribute oriented { "no" | "yes" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & degree?),
    (Skolem
     | Reify
     | Ind
     | Individual
     | Data
     | Var
     | Variable
     | Expr
     | Expression
     | Plex
     | left
     | leftHandSide),
    (Skolem
     | Reify
     | Ind
     | Individual
     | Data
     | Var
     | Variable
     | Expr
     | Expression
     | Plex
     | right
     | rightHandSide)
  }
Data =
  element Data {
    attribute node { xsd:anyURI }?
    & attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & text
    & _1*
  }
Skolem =
  element Skolem {
    (attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
Reify =
  element Reify {
    attribute node { xsd:anyURI }?
    & attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (RuleML
       | Assert
       | Retract
       | Query
       | Atom
       | Rel
       | And
       | Or
       | Implies
       | Forall
       | Exists
       | Expr
       | Fun
       | Rulebase
       | Entails
       | Neg
       | Naf
       | Equivalent
       | Equal
       | Data
       | Skolem
       | Reify
       | Ind
       | Var
       | Plex
       | formula
       | formula_2
       | op
       | formula_3
       | formula_4
       | then
       | if
       | declare
       | formula_5
       | formula_6
       | op_2
       | formula_7
       | then_2
       | if_2
       | degree
       | strong
       | weak
       | meta
       | torso
       | oid
       | slot
       | left
       | right
       | arg
       | resl
       | repo)*
  }
Ind =
  element Ind {
    (attribute iri { xsd:anyURI }?
     & attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
Var =
  element Var {
    (attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
Plex =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    ((Skolem
      | Reify
      | Ind
      | Individual
      | Data
      | Var
      | Variable
      | Expr
      | Expression
      | Plex
      | arg
      | argument)*
     & (repo | restOfPositionalArguments)?
     & slot*
     & (resl | restOfSlots)?)
  }
formula =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Entails
       | Rulebase)
  }
formula_2 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | NegationAsFailure
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Entails
       | Rulebase)
  }
op =
  element op {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Rel | Relation)
  }
formula_3 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | NegationAsFailure
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
formula_4 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | NegationAsFailure
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
then =
  element then {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
if =
  element if {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | NegationAsFailure
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
declare =
  element declare {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Var | Variable)
  }
formula_5 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
formula_6 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
op_2 =
  element op {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Fun | Function)
  }
formula_7 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
then_2 =
  element then {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Rulebase
  }
if_2 =
  element if {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Rulebase
  }
degree =
  element degree {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & Data
  }
strong =
  element strong {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
weak =
  element weak {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
meta =
  element meta {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Entails
       | Rulebase)
  }
torso =
  element torso {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Atom
       | Equal
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
oid =
  element oid {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Skolem
       | Reify
       | Ind
       | Individual
       | Data
       | Var
       | Variable
       | Expr
       | Expression
       | Plex)
  }
slot =
  element slot {
    ((attribute card { xsd:nonNegativeInteger }
      | attribute cardinality { xsd:nonNegativeInteger })?
     & attribute weight {
         xsd:decimal { minInclusive = "0.0" maxInclusive = "1.0" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (Ind | Individual | Data | Expr | Expression | Plex),
    (Skolem
     | Reify
     | Ind
     | Individual
     | Data
     | Var
     | Variable
     | Expr
     | Expression
     | Plex)
  }
left =
  element left {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Skolem
       | Reify
       | Ind
       | Individual
       | Data
       | Var
       | Variable
       | Expr
       | Expression
       | Plex)
  }
right =
  element right {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Skolem
       | Reify
       | Ind
       | Individual
       | Data
       | Var
       | Variable
       | Expr
       | Expression
       | Plex)
  }
arg =
  element arg {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (Skolem
     | Reify
     | Ind
     | Individual
     | Data
     | Var
     | Variable
     | Expr
     | Expression
     | Plex)
  }
resl =
  element resl {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Var | Variable | Plex_2)
  }
repo =
  element repo {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Var | Variable | Plex_3)
  }
act =
  element act {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (Assert | Retract | Query)*
  }
And_2 =
  element And {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula_3
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | NegationAsFailure
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
Or_2 =
  element Or {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (formula_4
     | Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | NegationAsFailure
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
Negation =
  element Negation {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | strong)
  }
NegationAsFailure =
  element NegationAsFailure {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (Atom
     | Equal
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | weak)
  }
objectIdentifier =
  element objectIdentifier {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Skolem
       | Reify
       | Ind
       | Individual
       | Data
       | Var
       | Variable
       | Expr
       | Expression
       | Plex)
  }
Relation =
  element Relation {
    (attribute iri { xsd:anyURI }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
operator =
  element operator {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Rel | Relation)
  }
Individual =
  element Individual {
    (attribute iri { xsd:anyURI }?
     & attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
Variable =
  element Variable {
    (attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
Expression =
  element Expression {
    ((attribute per { "copy" | "value" | "open" }
      | attribute interpretation { "copy" | "value" | "open" })?
     & attribute type { xsd:string }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (meta* & (oid | objectIdentifier)?),
    ((op_2 | Fun | Function | operator_2)
     & (Skolem
        | Reify
        | Ind
        | Individual
        | Data
        | Var
        | Variable
        | Expr
        | Expression
        | Plex
        | arg
        | argument)*
     & (repo | restOfPositionalArguments)?
     & slot*
     & (resl | restOfSlots)?)
  }
argument =
  element argument {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    (Skolem
     | Reify
     | Ind
     | Individual
     | Data
     | Var
     | Variable
     | Expr
     | Expression
     | Plex)
  }
restOfPositionalArguments =
  element restOfPositionalArguments {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Var | Variable | Plex_3)
  }
restOfSlots =
  element restOfSlots {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Var | Variable | Plex_2)
  }
Function =
  element Function {
    ((attribute per { "copy" | "value" | "open" }
      | attribute interpretation { "copy" | "value" | "open" })?
     & (attribute val { "1" | "0.." }?
        | attribute singlevalued { "1" | "0.." })
     & attribute iri { xsd:anyURI }?
     & attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    text
  }
operator_2 =
  element operator {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Fun | Function)
  }
leftHandSide =
  element leftHandSide {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Skolem
       | Reify
       | Ind
       | Individual
       | Data
       | Var
       | Variable
       | Expr
       | Expression
       | Plex)
  }
rightHandSide =
  element rightHandSide {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & (Skolem
       | Reify
       | Ind
       | Individual
       | Data
       | Var
       | Variable
       | Expr
       | Expression
       | Plex)
  }
_1 =
  element * {
    attribute * { text }*,
    (text & _1*)
  }
Plex_2 =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    (slot* & (resl | restOfSlots)?)
  }
Plex_3 =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?),
    meta*,
    ((Skolem
      | Reify
      | Ind
      | Individual
      | Data
      | Var
      | Variable
      | Expr
      | Expression
      | Plex
      | arg
      | argument)*
     & (repo | restOfPositionalArguments)?)
  }
